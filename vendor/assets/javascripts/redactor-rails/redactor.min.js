/*
	Redactor v10.0.4
	Updated: November 10, 2014

	http://imperavi.com/redactor/

	Copyright (c) 2009-2014, Imperavi LLC.
	License: http://imperavi.com/redactor/license/

	Usage: $('#content').redactor();
*/
!function (t) { "use strict"; Function.prototype.bind || (Function.prototype.bind = function (t) { var e = this; return function () { return e.apply(t) } }); var e = 0, i = /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube\.com\S*[^\w\-\s])([\w\-]{11})(?=[^\w\-]|$)(?![?=&+%\w.\-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/gi, s = /https?:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/; function r(t, e) { return new r.prototype.init(t, e) } t.fn.redactor = function (e) { var i = [], s = Array.prototype.slice.call(arguments, 1); return "string" == typeof e ? this.each(function () { var r, o = t.data(this, "redactor"); if ("-1" != e.search(/\./) ? void 0 !== o[(r = e.split("."))[0]] && (r = o[r[0]][r[1]]) : r = o[e], void 0 !== o && t.isFunction(r)) { var a = r.apply(o, s); void 0 !== a && a !== o && i.push(a) } else t.error('No such method "' + e + '" for Redactor') }) : this.each(function () { t.data(this, "redactor", {}), t.data(this, "redactor", r(this, e)) }), 0 === i.length ? this : 1 === i.length ? i[0] : i }, t.Redactor = r, t.Redactor.VERSION = "10.0.4", t.Redactor.modules = ["alignment", "autosave", "block", "buffer", "build", "button", "caret", "clean", "code", "core", "dropdown", "file", "focus", "image", "indent", "inline", "insert", "keydown", "keyup", "lang", "line", "link", "list", "modal", "observe", "paragraphize", "paste", "placeholder", "progress", "selection", "shortcuts", "tabifier", "tidy", "toolbar", "upload", "utils"], t.Redactor.opts = { lang: "en", direction: "ltr", plugins: !1, focus: !1, focusEnd: !1, placeholder: !1, visual: !0, tabindex: !1, minHeight: !1, maxHeight: !1, linebreaks: !1, replaceDivs: !0, paragraphize: !0, cleanStyleOnEnter: !1, enterKey: !0, cleanOnPaste: !0, cleanSpaces: !0, pastePlainText: !1, autosave: !1, autosaveName: !1, autosaveInterval: 60, autosaveOnChange: !1, linkTooltip: !0, linkProtocol: "http", linkNofollow: !1, linkSize: 50, imageEditable: !0, imageLink: !0, imagePosition: !0, imageFloatMargin: "10px", imageResizable: !0, imageUpload: !1, imageUploadParam: "file", uploadImageField: !1, dragImageUpload: !0, fileUpload: !1, fileUploadParam: "file", dragFileUpload: !0, s3: !1, convertLinks: !0, convertUrlLinks: !0, convertImageLinks: !0, convertVideoLinks: !0, preSpaces: 4, tabAsSpaces: !1, tabFocus: !0, scrollTarget: !1, toolbar: !0, toolbarFixed: !0, toolbarFixedTarget: document, toolbarFixedTopOffset: 0, toolbarExternal: !1, toolbarOverflow: !1, buttonSource: !1, buttons: ["html", "formatting", "bold", "italic", "deleted", "unorderedlist", "orderedlist", "outdent", "indent", "image", "file", "link", "alignment", "horizontalrule"], buttonsHide: [], buttonsHideOnMobile: [], formatting: ["p", "blockquote", "pre", "h1", "h2", "h3", "h4", "h5", "h6"], formattingAdd: !1, tabifier: !0, deniedTags: ["html", "head", "link", "body", "meta", "script", "style", "applet"], allowedTags: !1, removeComments: !1, replaceTags: [["strike", "del"]], replaceStyles: [["font-weight:\\s?bold", "strong"], ["font-style:\\s?italic", "em"], ["text-decoration:\\s?underline", "u"], ["text-decoration:\\s?line-through", "del"]], removeDataAttr: !1, removeAttr: !1, allowedAttr: !1, removeWithoutAttr: ["span"], removeEmpty: ["p"], activeButtons: ["deleted", "italic", "bold", "underline", "unorderedlist", "orderedlist", "alignleft", "aligncenter", "alignright", "justify"], activeButtonsStates: { b: "bold", strong: "bold", i: "italic", em: "italic", del: "deleted", strike: "deleted", ul: "unorderedlist", ol: "orderedlist", u: "underline" }, shortcuts: { "ctrl+shift+m, meta+shift+m": { func: "inline.removeFormat" }, "ctrl+b, meta+b": { func: "inline.format", params: ["bold"] }, "ctrl+i, meta+i": { func: "inline.format", params: ["italic"] }, "ctrl+h, meta+h": { func: "inline.format", params: ["superscript"] }, "ctrl+l, meta+l": { func: "inline.format", params: ["subscript"] }, "ctrl+k, meta+k": { func: "link.show" }, "ctrl+shift+7": { func: "list.toggle", params: ["orderedlist"] }, "ctrl+shift+8": { func: "list.toggle", params: ["unorderedlist"] } }, shortcutsAdd: !1, buffer: [], rebuffer: [], emptyHtml: "<p>&#x200b;</p>", invisibleSpace: "&#x200b;", imageTypes: ["image/png", "image/jpeg", "image/gif"], indentValue: 20, verifiedTags: ["a", "img", "b", "strong", "sub", "sup", "i", "em", "u", "small", "strike", "del", "cite", "ul", "ol", "li"], inlineTags: ["strong", "b", "u", "em", "i", "code", "del", "ins", "samp", "kbd", "sup", "sub", "mark", "var", "cite", "small"], alignmentTags: ["P", "H1", "H2", "H3", "H4", "H5", "H6", "DL", "DT", "DD", "DIV", "TD", "BLOCKQUOTE", "OUTPUT", "FIGCAPTION", "ADDRESS", "SECTION", "HEADER", "FOOTER", "ASIDE", "ARTICLE"], blockLevelElements: ["PRE", "UL", "OL", "LI"], langs: { en: { html: "HTML", video: "Insert Video", image: "Insert Image", table: "Table", link: "Link", link_insert: "Insert link", link_edit: "Edit link", unlink: "Unlink", formatting: "Formatting", paragraph: "Normal text", quote: "Quote", code: "Code", header1: "Header 1", header2: "Header 2", header3: "Header 3", header4: "Header 4", header5: "Header 5", bold: "Bold", italic: "Italic", fontcolor: "Font Color", backcolor: "Back Color", unorderedlist: "Unordered List", orderedlist: "Ordered List", outdent: "Outdent", indent: "Indent", cancel: "Cancel", insert: "Insert", save: "Save", _delete: "Delete", insert_table: "Insert Table", insert_row_above: "Add Row Above", insert_row_below: "Add Row Below", insert_column_left: "Add Column Left", insert_column_right: "Add Column Right", delete_column: "Delete Column", delete_row: "Delete Row", delete_table: "Delete Table", rows: "Rows", columns: "Columns", add_head: "Add Head", delete_head: "Delete Head", title: "Title", image_position: "Position", none: "None", left: "Left", right: "Right", center: "Center", image_web_link: "Image Web Link", text: "Text", mailto: "Email", web: "URL", video_html_code: "Video Embed Code or Youtube/Vimeo Link", file: "Insert File", upload: "Upload", download: "Download", choose: "Choose", or_choose: "Or choose", drop_file_here: "Drop file here", align_left: "Align text to the left", align_center: "Center text", align_right: "Align text to the right", align_justify: "Justify text", horizontalrule: "Insert Horizontal Rule", deleted: "Deleted", anchor: "Anchor", link_new_tab: "Open link in new tab", underline: "Underline", alignment: "Alignment", filename: "Name (optional)", edit: "Edit" } } }, r.fn = t.Redactor.prototype = { keyCode: { BACKSPACE: 8, DELETE: 46, DOWN: 40, ENTER: 13, SPACE: 32, ESC: 27, TAB: 9, CTRL: 17, META: 91, SHIFT: 16, ALT: 18, LEFT: 37, LEFT_WIN: 91 }, init: function (i, s) { this.$element = t(i), this.uuid = e++ , this.rtePaste = !1, this.$pasteBox = !1, this.loadOptions(s), this.loadModules(), this.formatting = {}, t.merge(this.opts.blockLevelElements, this.opts.alignmentTags), this.reIsBlock = new RegExp("^(" + this.opts.blockLevelElements.join("|") + ")$", "i"), this.tidy.setupAllowed(), this.lang.load(), t.extend(this.opts.shortcuts, this.opts.shortcutsAdd), this.core.setCallback("start"), this.start = !0, this.build.run() }, loadOptions: function (e) { this.opts = t.extend({}, t.extend(!0, {}, t.Redactor.opts), this.$element.data(), e) }, getModuleMethods: function (t) { return Object.getOwnPropertyNames(t).filter(function (e) { return "function" == typeof t[e] }) }, loadModules: function () { for (var e = t.Redactor.modules.length, i = 0; i < e; i++)this.bindModuleMethods(t.Redactor.modules[i]) }, bindModuleMethods: function (t) { if (void 0 !== this[t]) { this[t] = this[t](); for (var e = this.getModuleMethods(this[t]), i = e.length, s = 0; s < i; s++)this[t][e[s]] = this[t][e[s]].bind(this) } }, alignment: function () { return { left: function () { this.alignment.set("") }, right: function () { this.alignment.set("right") }, center: function () { this.alignment.set("center") }, justify: function () { this.alignment.set("justify") }, set: function (t) { this.utils.browser("msie") || this.$editor.focus(), this.buffer.set(), this.selection.save(), this.alignment.blocks = this.selection.getBlocks(), this.opts.linebreaks && !1 === this.alignment.blocks[0] ? this.alignment.setText(t) : this.alignment.setBlocks(t), this.selection.restore(), this.code.sync() }, setText: function (e) { var i = this.selection.wrap("div"); t(i).attr("data-tagblock", "redactor"), t(i).css("text-align", e) }, setBlocks: function (e) { t.each(this.alignment.blocks, t.proxy(function (t, i) { var s = this.utils.getAlignmentElement(i); s && ("" === e && void 0 !== s.data("tagblock") ? s.replaceWith(s.html()) : (s.css("text-align", e), this.utils.removeEmptyAttr(s, "style"))) }, this)) } } }, autosave: function () { return { enable: function () { this.opts.autosave && (this.autosave.html = !1, this.autosave.name = this.opts.autosaveName ? this.opts.autosaveName : this.$textarea.attr("name"), this.opts.autosaveOnChange || (this.autosaveInterval = setInterval(t.proxy(this.autosave.load, this), 1e3 * this.opts.autosaveInterval))) }, onChange: function () { this.opts.autosaveOnChange && this.autosave.load() }, load: function () { var e = this.code.get(); this.autosave.html !== e && (this.utils.isEmpty(e) || t.ajax({ url: this.opts.autosave, type: "post", data: "name=" + this.autosave.name + "&" + this.autosave.name + "=" + escape(encodeURIComponent(e)), success: t.proxy(function (t) { this.autosave.success(t, e) }, this) })) }, success: function (e, i) { var s; try { s = t.parseJSON(e) } catch (t) { s = e } var r = void 0 === s.error ? "autosave" : "autosaveError"; this.core.setCallback(r, this.autosave.name, s), this.autosave.html = i }, disable: function () { clearInterval(this.autosaveInterval) } } }, block: function () { return { formatting: function (t) { var e, i; void 0 !== this.formatting[t].data ? e = "data" : void 0 !== this.formatting[t].attr ? e = "attr" : void 0 !== this.formatting[t].class && (e = "class"), e && (i = this.formatting[t][e]), this.block.format(this.formatting[t].tag, e, i) }, format: function (e, i, s) { "quote" == e && (e = "blockquote"); -1 != t.inArray(e, ["p", "pre", "blockquote", "h1", "h2", "h3", "h4", "h5", "h6"]) && (this.block.isRemoveInline = "pre" == e || -1 != e.search(/h[1-6]/i), this.utils.browser("msie") || this.$editor.focus(), this.block.blocks = this.selection.getBlocks(), this.block.blocksSize = this.block.blocks.length, this.block.type = i, this.block.value = s, this.buffer.set(), this.selection.save(), this.block.set(e), this.selection.restore(), this.code.sync()) }, set: function (t) { this.selection.get(), this.block.containerTag = this.range.commonAncestorContainer.tagName, this.range.collapsed ? this.block.setCollapsed(t) : this.block.setMultiple(t) }, setCollapsed: function (e) { var i = this.block.blocks[0]; if (!1 !== i) if ("LI" != i.tagName) { if (("TD" == this.block.containerTag || "TH" == this.block.containerTag) && !this.opts.linebreaks) document.execCommand("formatblock", !1, "<" + e + ">"), i = this.selection.getBlock(), this.block.toggle(t(i)); else if (i.tagName.toLowerCase() != e) if (this.opts.linebreaks && "p" == e) t(i).prepend("<br>").append("<br>"), this.utils.replaceWithContents(i); else { var s = this.utils.replaceToTag(i, e); this.block.toggle(s), "p" != e && "blockquote" != e && s.find("img").remove(), this.block.isRemoveInline && this.utils.removeInlineTags(s), ("p" == e || this.block.headTag) && s.find("p").contents().unwrap(), this.block.formatTableWrapping(s) } else if ("blockquote" == e && i.tagName.toLowerCase() == e) if (this.opts.linebreaks) t(i).prepend("<br>").append("<br>"), this.utils.replaceWithContents(i); else { var r = this.utils.replaceToTag(i, "p"); this.block.toggle(r) } else i.tagName.toLowerCase() == e && this.block.toggle(t(i)) } else { if ("blockquote" != e) return; this.block.formatListToBlockquote() } }, setMultiple: function (e) { var i = this.block.blocks[0], s = "TD" == this.block.containerTag || "TH" == this.block.containerTag; if (!1 !== i && 1 === this.block.blocksSize) if (i.tagName.toLowerCase() == e && "blockquote" == e) if (this.opts.linebreaks) t(i).prepend("<br>").append("<br>"), this.utils.replaceWithContents(i); else { var r = this.utils.replaceToTag(i, "p"); this.block.toggle(r) } else if ("LI" == i.tagName) { if ("blockquote" != e) return; this.block.formatListToBlockquote() } else if ("BLOCKQUOTE" == this.block.containerTag) this.block.formatBlockquote(e); else if (this.opts.linebreaks && (s || this.range.commonAncestorContainer != i)) this.block.formatWrap(e); else if (this.opts.linebreaks && "p" == e) t(i).prepend("<br>").append("<br>"), this.utils.replaceWithContents(i); else if ("TD" === i.tagName) this.block.formatWrap(e); else { var o = this.utils.replaceToTag(i, e); this.block.toggle(o), this.block.isRemoveInline && this.utils.removeInlineTags(o), ("p" == e || this.block.headTag) && o.find("p").contents().unwrap() } else if (this.opts.linebreaks || "p" != e) { if ("blockquote" == e) { for (var a = 0, n = 0; n < this.block.blocksSize; n++)"BLOCKQUOTE" == this.block.blocks[n].tagName && a++; if (a == this.block.blocksSize) return void t.each(this.block.blocks, t.proxy(function (e, i) { this.opts.linebreaks ? (t(i).prepend("<br>").append("<br>"), this.utils.replaceWithContents(i)) : this.utils.replaceToTag(i, "p") }, this)) } this.block.formatWrap(e) } else { var l = 0, c = !1; "class" == this.block.type && (c = "toggle", l = t(this.block.blocks).filter("." + this.block.value).size(), this.block.blocksSize == l ? c = "toggle" : this.block.blocksSize > l ? c = "set" : 0 === l && (c = "set")); var h = ["ul", "ol", "li", "td", "th", "dl", "dt", "dd"]; t.each(this.block.blocks, t.proxy(function (i, s) { if (-1 == t.inArray(s.tagName.toLowerCase(), h)) { var r = this.utils.replaceToTag(s, e); c ? "toggle" == c ? this.block.toggle(r) : "remove" == c ? this.block.remove(r) : "set" == c && this.block.set2(r) : this.block.toggle(r), "p" != e && "blockquote" != e && r.find("img").remove(), this.block.isRemoveInline && this.utils.removeInlineTags(r), ("p" == e || this.block.headTag) && r.find("p").contents().unwrap() } }, this)) } }, toggle: function (t) { return "class" == this.block.type ? void t.toggleClass(this.block.value) : "attr" == this.block.type || "data" == this.block.type ? void (t.attr(this.block.value.name) == this.block.value.value ? t.removeAttr(this.block.value.name) : t.attr(this.block.value.name, this.block.value.value)) : void t.removeAttr("style class") }, remove: function (t) { t.removeClass(this.block.value) }, formatListToBlockquote: function () { var e = t(this.block.blocks[0]).closest("ul, ol"); t(e).find("ul, ol").contents().unwrap(), t(e).find("li").append(t("<br>")).contents().unwrap(); var i = this.utils.replaceToTag(e, "blockquote"); this.block.toggle(i) }, formatBlockquote: function (e) { document.execCommand("outdent"), document.execCommand("formatblock", !1, e), this.clean.clearUnverified(), this.$editor.find("p:empty").remove(); var i = this.selection.getBlock(); "p" != e && t(i).find("img").remove(), this.opts.linebreaks || this.block.toggle(t(i)), this.$editor.find("ul, ol, tr, blockquote, p").each(t.proxy(this.utils.removeEmpty, this)), this.opts.linebreaks && "p" == e && this.utils.replaceWithContents(i) }, formatWrap: function (e) { if ("UL" == this.block.containerTag || "OL" == this.block.containerTag) { if ("blockquote" != e) return; this.block.formatListToBlockquote() } var i = this.selection.wrap(e); if (!1 !== i) { var s = t(i); this.block.formatTableWrapping(s); var r = s.find(this.opts.blockLevelElements.join(",") + ", td, table, thead, tbody, tfoot, th, tr"); (this.opts.linebreaks && "p" == e || "pre" == e || "blockquote" == e) && r.append("<br />"), r.contents().unwrap(), "p" != e && "blockquote" != e && s.find("img").remove(), t.each(this.block.blocks, t.proxy(this.utils.removeEmpty, this)), s.append(this.selection.getMarker(2)), this.opts.linebreaks || this.block.toggle(s), this.$editor.find("ul, ol, tr, blockquote, p").each(t.proxy(this.utils.removeEmpty, this)), s.find("blockquote:empty").remove(), this.block.isRemoveInline && this.utils.removeInlineTags(s), this.opts.linebreaks && "p" == e && this.utils.replaceWithContents(s) } }, formatTableWrapping: function (t) { 0 !== t.closest("table").size() && (0 === t.closest("tr").size() && t.wrap("<tr>"), 0 === t.closest("td").size() && 0 === t.closest("th").size() && t.wrap("<td>")) }, removeData: function (e, i) { var s = this.selection.getBlocks(); t(s).removeAttr("data-" + e), this.code.sync() }, setData: function (e, i) { var s = this.selection.getBlocks(); t(s).attr("data-" + e, i), this.code.sync() }, toggleData: function (e, i) { var s = this.selection.getBlocks(); t.each(s, function () { t(this).attr("data-" + e) ? t(this).removeAttr("data-" + e) : t(this).attr("data-" + e, i) }) }, removeAttr: function (e, i) { var s = this.selection.getBlocks(); t(s).removeAttr(e), this.code.sync() }, setAttr: function (e, i) { var s = this.selection.getBlocks(); t(s).attr(e, i), this.code.sync() }, toggleAttr: function (e, i) { var s = this.selection.getBlocks(); t.each(s, function () { t(this).attr(name) ? t(this).removeAttr(name) : t(this).attr(name, i) }) }, removeClass: function (e) { var i = this.selection.getBlocks(); t(i).removeClass(e), this.utils.removeEmptyAttr(i, "class"), this.code.sync() }, setClass: function (e) { var i = this.selection.getBlocks(); t(i).addClass(e), this.code.sync() }, toggleClass: function (e) { var i = this.selection.getBlocks(); t(i).toggleClass(e), this.code.sync() } } }, buffer: function () { return { set: function (t) { void 0 === t || "undo" == t ? this.buffer.setUndo() : this.buffer.setRedo() }, setUndo: function () { this.selection.save(), this.opts.buffer.push(this.$editor.html()), this.selection.restore() }, setRedo: function () { this.selection.save(), this.opts.rebuffer.push(this.$editor.html()), this.selection.restore() }, getUndo: function () { this.$editor.html(this.opts.buffer.pop()) }, getRedo: function () { this.$editor.html(this.opts.rebuffer.pop()) }, add: function () { this.opts.buffer.push(this.$editor.html()) }, undo: function () { 0 !== this.opts.buffer.length && (this.buffer.set("redo"), this.buffer.getUndo(), this.selection.restore(), setTimeout(t.proxy(this.observe.load, this), 50)) }, redo: function () { 0 !== this.opts.rebuffer.length && (this.buffer.set("undo"), this.buffer.getRedo(), this.selection.restore(), setTimeout(t.proxy(this.observe.load, this), 50)) } } }, build: function () { return { run: function () { this.build.createContainerBox(), this.build.loadContent(), this.build.loadEditor(), this.build.enableEditor(), this.build.setCodeAndCall() }, isTextarea: function () { return "TEXTAREA" === this.$element[0].tagName }, createContainerBox: function () { this.$box = t('<div class="redactor-box" />') }, createTextarea: function () { this.$textarea = t("<textarea />").attr("name", this.build.getTextareaName()) }, getTextareaName: function () { var t = this.$element.attr("id"); return void 0 === t && (t = "content-" + this.uuid), t }, loadContent: function () { var e = this.build.isTextarea() ? "val" : "html"; this.content = t.trim(this.$element[e]()) }, enableEditor: function () { this.$editor.attr({ contenteditable: !0, dir: this.opts.direction }) }, loadEditor: function () { var t = this.build.isTextarea() ? "fromTextarea" : "fromElement"; this.build[t]() }, fromTextarea: function () { this.$editor = t("<div />"), this.$textarea = this.$element, this.$box.insertAfter(this.$element).append(this.$editor).append(this.$element), this.$editor.addClass("redactor-editor"), this.$element.hide() }, fromElement: function () { this.$editor = this.$element, this.build.createTextarea(), this.$box.insertAfter(this.$editor).append(this.$editor).append(this.$textarea), this.$editor.addClass("redactor-editor"), this.$textarea.hide() }, setCodeAndCall: function () { this.code.set(this.content), this.build.setOptions(), this.build.callEditor(), this.opts.visual || setTimeout(t.proxy(this.code.showCode, this), 200) }, callEditor: function () { this.build.disableMozillaEditing(), this.build.setEvents(), this.build.setHelpers(), this.opts.toolbar && (this.opts.toolbar = this.toolbar.init(), this.toolbar.build()), this.modal.loadTemplates(), this.build.plugins(), setTimeout(t.proxy(this.observe.load, this), 4), this.core.setCallback("init") }, setOptions: function () { t(this.$textarea).attr("dir", this.opts.direction), this.opts.linebreaks && this.$editor.addClass("redactor-linebreaks"), this.opts.tabindex && this.$editor.attr("tabindex", this.opts.tabindex), this.opts.minHeight && this.$editor.css("minHeight", this.opts.minHeight), this.opts.maxHeight && this.$editor.css("maxHeight", this.opts.maxHeight) }, setEvents: function () { var e; this.$editor.on("drop.redactor", t.proxy(function (e) { if (e = e.originalEvent || e, void 0 === window.FormData || !e.dataTransfer) return !0; if (0 === e.dataTransfer.files.length) return this.code.sync(), setTimeout(t.proxy(this.clean.clearUnverified, this), 1), this.core.setCallback("drop", e), !0; if (e.preventDefault(), this.opts.dragImageUpload || this.opts.dragFileUpload) { var i = e.dataTransfer.files; this.upload.directUpload(i[0], e) } setTimeout(t.proxy(this.clean.clearUnverified, this), 1), this.core.setCallback("drop", e) }, this)), this.$editor.on("click.redactor", t.proxy(function (t) { var e = "click"; "click" != this.core.getEvent() && "arrow" != this.core.getEvent() || (e = !1), this.core.addEvent(e), this.utils.disableSelectAll(), this.core.setCallback("click", t) }, this)), this.$editor.on("paste.redactor", t.proxy(this.paste.init, this)), this.$editor.on("keydown.redactor", t.proxy(this.keydown.init, this)), this.$editor.on("keyup.redactor", t.proxy(this.keyup.init, this)), t.isFunction(this.opts.codeKeydownCallback) && this.$textarea.on("keydown.redactor-textarea", t.proxy(this.opts.codeKeydownCallback, this)), t.isFunction(this.opts.codeKeyupCallback) && this.$textarea.on("keyup.redactor-textarea", t.proxy(this.opts.codeKeyupCallback, this)), t.isFunction(this.opts.focusCallback) && this.$editor.on("focus.redactor", t.proxy(this.opts.focusCallback, this)), t(document).on("mousedown", function (i) { e = t(i.target) }), this.$editor.on("blur.redactor", t.proxy(function (i) { if (!this.rtePaste) { var s = t(e); s.hasClass("redactor-toolbar, redactor-dropdown") || s.is("#redactor-modal") || 0 !== s.parents(".redactor-toolbar, .redactor-dropdown, #redactor-modal").size() || (this.utils.disableSelectAll(), t.isFunction(this.opts.blurCallback) && this.core.setCallback("blur", i)) } }, this)) }, setHelpers: function () { this.autosave.enable(), this.placeholder.enable(), this.opts.focus && setTimeout(t.proxy(this.focus.setStart, this), 100), this.opts.focusEnd && setTimeout(t.proxy(this.focus.setEnd, this), 100) }, plugins: function () { this.opts.plugins && RedactorPlugins && t.each(this.opts.plugins, t.proxy(function (e, i) { if (void 0 !== RedactorPlugins[i]) if (-1 === t.inArray(i, t.Redactor.modules)) { if (t.isFunction(RedactorPlugins[i])) { this[i] = RedactorPlugins[i](); for (var s = this.getModuleMethods(this[i]), r = s.length, o = 0; o < r; o++)this[i][s[o]] = this[i][s[o]].bind(this); t.isFunction(this[i].init) && this[i].init() } } else t.error('Plugin name "' + i + "\" matches the name of the Redactor's module.") }, this)) }, disableMozillaEditing: function () { if (this.utils.browser("mozilla")) try { document.execCommand("enableObjectResizing", !1, !1), document.execCommand("enableInlineTableEditing", !1, !1) } catch (t) { } } } }, button: function () { return { build: function (e, i) { var s = t('<a href="#" class="re-icon re-' + e + '" rel="' + e + '" />').attr("tabindex", "-1"); if ((i.func || i.command || i.dropdown) && s.on("touchstart click", t.proxy(function (t) { if (s.hasClass("redactor-button-disabled")) return !1; var r = "func", o = i.func; i.command ? (r = "command", o = i.command) : i.dropdown && (r = "dropdown", o = !1), this.button.onClick(t, e, r, o) }, this)), i.dropdown) { var r = t('<div class="redactor-dropdown redactor-dropdown-box-' + e + '" style="display: none;">'); s.data("dropdown", r), this.dropdown.build(e, r, i.dropdown) } return this.utils.isDesktop() && this.button.createTooltip(s, e, i.title), s }, createTooltip: function (e, i, s) { var r = t("<span>").addClass("redactor-toolbar-tooltip redactor-toolbar-tooltip-" + i).hide().html(s); r.appendTo("body"), e.on("mouseover", function () { if (!t(this).hasClass("redactor-button-disabled")) { var i = e.offset(), s = e.innerHeight(), o = e.innerWidth(); r.show(), r.css({ top: i.top + s + "px", left: i.left + o / 2 - r.innerWidth() / 2 + "px" }) } }), e.on("mouseout", function () { r.hide() }) }, onClick: function (e, i, s, r) { if (e.preventDefault(), this.utils.browser("msie") && (e.returnValue = !1), "command" == s) this.inline.format(r); else if ("dropdown" == s) this.dropdown.show(e, i); else { var o; t.isFunction(r) ? (r.call(this, i), this.observe.buttons(e, i)) : "-1" != r.search(/\./) ? void 0 !== this[(o = r.split("."))[0]] && (this[o[0]][o[1]](i), this.observe.buttons(e, i)) : (this[r](i), this.observe.buttons(e, i)) } }, get: function (t) { return this.$toolbar.find("a.re-" + t) }, setActive: function (t) { this.button.get(t).addClass("redactor-act") }, setInactive: function (t) { this.button.get(t).removeClass("redactor-act") }, setInactiveAll: function (t) { void 0 === t ? this.$toolbar.find("a.re-icon").removeClass("redactor-act") : this.$toolbar.find("a.re-icon").not(".re-" + t).removeClass("redactor-act") }, setActiveInVisual: function () { this.$toolbar.find("a.re-icon").not("a.re-html").removeClass("redactor-button-disabled") }, setInactiveInCode: function () { this.$toolbar.find("a.re-icon").not("a.re-html").addClass("redactor-button-disabled") }, changeIcon: function (t, e) { this.button.get(t).addClass("re-" + e) }, removeIcon: function (t, e) { this.button.get(t).removeClass("re-" + e) }, setAwesome: function (t, e) { var i = this.button.get(t); i.removeClass("redactor-btn-image").addClass("fa-redactor-btn"), i.html('<i class="fa ' + e + '"></i>') }, addCallback: function (e, i) { var s = "dropdown" == i ? "dropdown" : "func", r = e.attr("rel"); e.on("touchstart click", t.proxy(function (t) { if (e.hasClass("redactor-button-disabled")) return !1; this.button.onClick(t, r, s, i) }, this)) }, addDropdown: function (e, i) { var s = e.attr("rel"); this.button.addCallback(e, "dropdown"); var r = t('<div class="redactor-dropdown redactor-dropdown-box-' + s + '" style="display: none;">'); return e.data("dropdown", r), i && this.dropdown.build(s, r, i), r }, add: function (e, i) { if (this.opts.toolbar) { var s = this.button.build(e, { title: i }); return s.addClass("redactor-btn-image"), this.$toolbar.append(t("<li>").append(s)), s } }, addFirst: function (e, i) { if (this.opts.toolbar) { var s = this.button.build(e, { title: i }); return this.$toolbar.prepend(t("<li>").append(s)), s } }, addAfter: function (e, i, s) { if (this.opts.toolbar) { var r = this.button.build(i, { title: s }), o = this.button.get(e); return 0 !== o.size() ? o.parent().after(t("<li>").append(r)) : this.$toolbar.append(t("<li>").append(r)), r } }, addBefore: function (e, i, s) { if (this.opts.toolbar) { var r = this.button.build(i, { title: s }), o = this.button.get(e); return 0 !== o.size() ? o.parent().before(t("<li>").append(r)) : this.$toolbar.append(t("<li>").append(r)), r } }, remove: function (t) { this.button.get(t).remove() } } }, caret: function () { return { setStart: function (e) { if (this.utils.isBlock(e)) this.caret.set(e, 0, e, 0); else { var i = this.utils.createSpaceElement(); t(e).prepend(i), this.caret.setEnd(i) } }, setEnd: function (t) { this.caret.set(t, 1, t, 1) }, set: function (e, i, s, r) { if (this.utils.browser("msie") || this.$editor.focus(), e = e[0] || e, s = s[0] || s, this.utils.isBlockTag(e.tagName) && "" === e.innerHTML && (e.innerHTML = this.opts.invisibleSpace), "BR" == e.tagName && !1 === this.opts.linebreaks) { var o = t(this.opts.emptyHtml)[0]; t(e).replaceWith(o), s = e = o } this.selection.get(); try { this.range.setStart(e, i), this.range.setEnd(s, r) } catch (t) { } this.selection.addRange() }, setAfter: function (e) { try { var i = t(e)[0].tagName; if ("BR" == i || this.utils.isBlock(e)) "BR" != i && this.utils.browser("msie") ? this.caret.setStart(t(e).next()) : this.caret.setAfterOrBefore(e, "after"); else { var s = this.utils.createSpaceElement(); t(e).after(s), this.caret.setEnd(s) } } catch (i) { s = this.utils.createSpaceElement(); t(e).after(s), this.caret.setEnd(s) } }, setBefore: function (e) { this.utils.isBlock(e) ? this.caret.setEnd(t(e).prev()) : this.caret.setAfterOrBefore(e, "before") }, setAfterOrBefore: function (t, e) { if (this.utils.browser("msie") || this.$editor.focus(), t = t[0] || t, this.selection.get(), "after" == e) try { this.range.setStartAfter(t), this.range.setEndAfter(t) } catch (t) { } else try { this.range.setStartBefore(t), this.range.setEndBefore(t) } catch (t) { } this.range.collapse(!1), this.selection.addRange() }, getOffsetOfElement: function (e) { e = e[0] || e, this.selection.get(); var i = this.range.cloneRange(); return i.selectNodeContents(e), i.setEnd(this.range.endContainer, this.range.endOffset), t.trim(i.toString()).length }, getOffset: function () { var t = 0; if (window.getSelection().rangeCount > 0) { var e = window.getSelection().getRangeAt(0), i = e.cloneRange(); i.selectNodeContents(this.$editor[0]), i.setEnd(e.endContainer, e.endOffset), t = i.toString().length } return t }, setOffset: function (t, e) { void 0 === e && (e = t), this.focus.isFocused() || this.focus.setStart(); for (var i, s = document.createRange(), r = document.getSelection(), o = 0, a = document.createTreeWalker(this.$editor[0], NodeFilter.SHOW_TEXT, null, null); i = a.nextNode();)if ((o += i.nodeValue.length) > t && (s.setStart(i, i.nodeValue.length + t - o), t = 1 / 0), o >= e) { s.setEnd(i, i.nodeValue.length + e - o); break } r.removeAllRanges(), r.addRange(s) }, setToPoint: function (t, e) { this.caret.setOffset(t, e) }, getCoords: function () { return this.caret.getOffset() } } }, clean: function () { return { onSet: function (e) { e = (e = (e = (e = (e = this.clean.savePreCode(e)).replace(/\$/g, "&#36;")).replace(/”/g, '"')).replace(/‘/g, "'")).replace(/’/g, "'"), this.opts.replaceDivs && (e = this.clean.replaceDivs(e)), this.opts.linebreaks && (e = this.clean.replaceParagraphsToBr(e)), e = this.clean.saveFormTags(e); var i = t("<div>"); i.html(e); var s = i.find("font[style]"); return 0 !== s.length && (s.replaceWith(function () { var e = t(this); t("<span>").attr("style", e.attr("style")); return $span.append(e.contents()) }), e = i.html()), i.remove(), e = (e = e.replace(/<font(.*?[^<])>/gi, "")).replace(/<\/font>/gi, ""), e = this.tidy.load(e), this.opts.paragraphize && (e = this.paragraphize.load(e)), e = this.clean.setVerified(e), e = this.clean.convertInline(e) }, onSync: function (e) { if (-1 != (e = (e = (e = e.replace(/[\u200B-\u200D\uFEFF]/g, "")).replace(/&#x200b;/gi, "")).replace(/&nbsp;/gi, " ")).search(/^<p>(||\s||&nbsp;)<\/p>$/i)) return ""; e = this.clean.restoreFormTags(e); return t.each({ "™": "&trade;", "©": "&copy;", "…": "&hellip;", "—": "&mdash;", "‐": "&dash;" }, function (t, i) { e = e.replace(new RegExp(t, "g"), i) }), e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = e.replace(new RegExp("<br\\s?/?></li>", "gi"), "</li>")).replace(new RegExp("</li><br\\s?/?>", "gi"), "</li>")).replace(new RegExp('<div(.*?) data-tagblock="redactor"(.*?[^>])>', "gi"), "<div$1$2>")).replace(new RegExp('<(.*?) data-verified="redactor"(.*?[^>])>', "gi"), "<$1$2>")).replace(new RegExp('<span(.*?) rel="(.*?)"(.*?[^>])>', "gi"), "<span$1$3>")).replace(new RegExp('<img(.*?) rel="(.*?)"(.*?[^>])>', "gi"), "<img$1$3>")).replace(new RegExp('<img(.*?) style="" (.*?[^>])>', "gi"), "<img$1 $2>")).replace(new RegExp("<img(.*?) style (.*?[^>])>", "gi"), "<img$1 $2>")).replace(new RegExp('<span class="redactor-invisible-space">(.*?)</span>', "gi"), "$1")).replace(/ data-save-url="(.*?[^>])"/gi, "")).replace(/<span(.*?)id="redactor-image-box"(.*?[^>])>([\w\W]*?)<img(.*?)><\/span>/gi, "$3<img$4>")).replace(/<span(.*?)id="redactor-image-resizer"(.*?[^>])>(.*?)<\/span>/gi, "")).replace(/<span(.*?)id="redactor-image-editter"(.*?[^>])>(.*?)<\/span>/gi, "")).replace(/<font(.*?[^<])>/gi, "")).replace(/<\/font>/gi, ""), e = this.tidy.load(e), this.opts.linkNofollow && (e = (e = e.replace(/<a(.*?)rel="nofollow"(.*?[^>])>/gi, "<a$1$2>")).replace(/<a(.*?[^>])>/gi, '<a$1 rel="nofollow">')), e = (e = (e = (e = (e = e.replace(/<(.*?) data-redactor-tag="(.*?)"(.*?[^>])>/gi, "<$1$3>")).replace(/<(.*?) data-redactor-class="(.*?)"(.*?[^>])>/gi, "<$1$3>")).replace(/<(.*?) data-redactor-style="(.*?)"(.*?[^>])>/gi, "<$1$3>")).replace(new RegExp('<(.*?) data-verified="redactor"(.*?[^>])>', "gi"), "<$1$2>")).replace(new RegExp('<(.*?) data-verified="redactor">', "gi"), "<$1>") }, onPaste: function (e, i) { if (e = (e = (e = (e = (e = (e = (e = (e = (e = t.trim(e)).replace(/\$/g, "&#36;")).replace(/”/g, '"')).replace(/“/g, '"')).replace(/‘/g, "'")).replace(/’/g, "'")).replace(/<span class="Apple-converted-space">&nbsp;<\/span>/gi, " ")).replace(/<span class="Apple-tab-span"[^>]*>\t<\/span>/gi, "\t")).replace(/<span[^>]*>(\s|&nbsp;)<\/span>/gi, " "), this.opts.pastePlainText) return this.clean.getPlainText(e); if (!this.utils.isSelectAll() && void 0 === i) { if (this.utils.isCurrentOrParent(["FIGCAPTION", "A"])) return this.clean.getPlainText(e, !1); if (this.utils.isCurrentOrParent("PRE")) return this.clean.getPreCode(e); if (this.utils.isCurrentOrParent(["BLOCKQUOTE", "H1", "H2", "H3", "H4", "H5", "H6"])) { if (e = this.clean.getOnlyImages(e), !this.utils.browser("msie")) { var s = this.selection.getBlock(); s && "P" == s.tagName && (e = e.replace(/<img(.*?)>/gi, "<p><img$1></p>")) } return e } if (this.utils.isCurrentOrParent(["TD"])) return e = this.clean.onPasteTidy(e, "td"), this.opts.linebreaks && (e = this.clean.replaceParagraphsToBr(e)), e = this.clean.replaceDivsToBr(e); if (this.utils.isCurrentOrParent(["LI"])) return this.clean.onPasteTidy(e, "li") } return e = this.clean.isSingleLine(e, i), this.clean.singleLine || (this.opts.linebreaks && (e = this.clean.replaceParagraphsToBr(e)), this.opts.replaceDivs && (e = this.clean.replaceDivs(e)), e = this.clean.saveFormTags(e)), e = this.clean.onPasteWord(e), e = this.clean.onPasteExtra(e), e = this.clean.onPasteTidy(e, "all"), !this.clean.singleLine && this.opts.paragraphize && (e = this.paragraphize.load(e)), e = this.clean.removeDirtyStyles(e), e = this.clean.onPasteRemoveSpans(e), e = this.clean.onPasteRemoveEmpty(e), e = this.clean.convertInline(e) }, onPasteWord: function (t) { return t = (t = t.replace(/<!--[\s\S]*?-->/gi, "")).replace(/<style[^>]*>[\s\S]*?<\/style>/gi, ""), /(class=\"?Mso|style=\"[^\"]*\bmso\-|w:WordDocument)/.test(t) && (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = this.clean.onPasteIeFixLinks(t)).replace(/<img(.*?)v:shapes=(.*?)>/gi, "")).replace(/src="file\:\/\/(.*?)"/, 'src=""')).replace(/<p(.*?)class="MsoListParagraphCxSpFirst"([\w\W]*?)<\/p>/gi, "<ul><li$2</li>")).replace(/<p(.*?)class="MsoListParagraphCxSpMiddle"([\w\W]*?)<\/p>/gi, "<li$2</li>")).replace(/<p(.*?)class="MsoListParagraphCxSpLast"([\w\W]*?)<\/p>/gi, "<li$2</li></ul>")).replace(/<p(.*?)class="MsoListParagraph"([\w\W]*?)<\/p>/gi, "<ul><li$2</li></ul>")).replace(/·/g, "")).replace(/<p class="Mso(.*?)"/gi, "<p")).replace(/ class=\"(mso[^\"]*)\"/gi, "")).replace(/ class=(mso\w+)/gi, "")).replace(/<o:p(.*?)>([\w\W]*?)<\/o:p>/gi, "$2")).replace(/\n/g, " ")).replace(/<p>\n?<li>/gi, "<li>")), this.opts.cleanSpaces && (t = t.replace(/(\s|&nbsp;)+/g, " ")), t }, onPasteExtra: function (t) { return t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace(/<b\sid="internal-source-marker(.*?)">([\w\W]*?)<\/b>/gi, "$2")).replace(/<b(.*?)id="docs-internal-guid(.*?)">([\w\W]*?)<\/b>/gi, "$3")).replace(/<span[^>]*(font-style: italic; font-weight: bold|font-weight: bold; font-style: italic)[^>]*>/gi, '<span style="font-weight: bold;"><span style="font-style: italic;">')).replace(/<span[^>]*font-style: italic[^>]*>/gi, '<span style="font-style: italic;">')).replace(/<span[^>]*font-weight: bold[^>]*>/gi, '<span style="font-weight: bold;">')).replace(/<span[^>]*text-decoration: underline[^>]*>/gi, '<span style="text-decoration: underline;">')).replace(/<img>/gi, "")).replace(/\n{3,}/gi, "\n")).replace(/<font(.*?)>([\w\W]*?)<\/font>/gi, "$2")).replace(/<p><p>/gi, "<p>")).replace(/<\/p><\/p>/gi, "</p>")).replace(/<li>(\s*|\t*|\n*)<p>/gi, "<li>")).replace(/<\/p>(\s*|\t*|\n*)<\/li>/gi, "</li>")).replace(/<\/p>\s<p/gi, "</p><p")).replace(/<img src="webkit-fake-url\:\/\/(.*?)"(.*?)>/gi, "")).replace(/<p>•([\w\W]*?)<\/p>/gi, "<li>$1</li>"), this.utils.browser("mozilla") && (t = t.replace(/<br\s?\/?>$/gi, "")), t }, onPasteTidy: function (t, e) { var i = ["span", "a", "pre", "blockquote", "small", "em", "strong", "code", "kbd", "mark", "address", "cite", "var", "samp", "dfn", "sup", "sub", "b", "i", "u", "del", "ol", "ul", "li", "dl", "dt", "dd", "p", "br", "video", "audio", "iframe", "embed", "param", "object", "img", "table", "td", "th", "tr", "tbody", "tfoot", "thead", "h1", "h2", "h3", "h4", "h5", "h6"], s = !1, r = [["a", "*"], ["img", ["src", "alt"]], ["span", ["class", "rel", "data-verified"]], ["iframe", "*"], ["video", "*"], ["audio", "*"], ["embed", "*"], ["object", "*"], ["param", "*"], ["source", "*"]]; "all" == e ? (s = ["p", "span", "h1", "h2", "h3", "h4", "h5", "h6"], r = [["table", "class"], ["td", ["colspan", "rowspan"]], ["a", "*"], ["img", ["src", "alt", "data-redactor-inserted-image"]], ["span", ["class", "rel", "data-verified"]], ["iframe", "*"], ["video", "*"], ["audio", "*"], ["embed", "*"], ["object", "*"], ["param", "*"], ["source", "*"]]) : "td" == e ? i = ["ul", "ol", "li", "span", "a", "small", "em", "strong", "code", "kbd", "mark", "cite", "var", "samp", "dfn", "sup", "sub", "b", "i", "u", "del", "ol", "ul", "li", "dl", "dt", "dd", "br", "iframe", "video", "audio", "embed", "param", "object", "img", "h1", "h2", "h3", "h4", "h5", "h6"] : "li" == e && (i = ["ul", "ol", "li", "span", "a", "small", "em", "strong", "code", "kbd", "mark", "cite", "var", "samp", "dfn", "sup", "sub", "b", "i", "u", "del", "br", "iframe", "video", "audio", "embed", "param", "object", "img"]); var o = { deniedTags: !1, allowedTags: i, removeComments: !0, removePhp: !0, removeAttr: !1, allowedAttr: r, removeEmpty: s }; return this.tidy.load(t, o) }, onPasteRemoveEmpty: function (t) { return t = t.replace(/<(p|h[1-6])>(|\s|\n|\t|<br\s?\/?>)<\/(p|h[1-6])>/gi, ""), this.opts.linebreaks || (t = t.replace(/<br>$/i, "")), t }, onPasteRemoveSpans: function (t) { return t = (t = t.replace(/<span>(.*?)<\/span>/gi, "$1")).replace(/<span[^>]*>\s|&nbsp;<\/span>/gi, " ") }, onPasteIeFixLinks: function (e) { return this.utils.browser("msie") ? (0 === t.trim(e).search(/^<a(.*?)>(.*?)<\/a>$/i) && (e = e.replace(/^<a(.*?)>(.*?)<\/a>$/i, "$2")), e) : e }, isSingleLine: function (t, e) { if (this.clean.singleLine = !1, !this.utils.isSelectAll() && void 0 === e) { var i = this.opts.blockLevelElements.join("|").replace("P|", "").replace("DIV|", ""), s = t.match(new RegExp("</(" + i + ")>", "gi")), r = t.match(/<\/(p|div)>/gi); if (!s && (null === r || r && r.length <= 1)) { var o = t.match(/<br\s?\/?>/gi), a = t.match(/<img(.*?[^>])>/gi); o || a || (this.clean.singleLine = !0, t = t.replace(/<\/?(p|div)(.*?)>/gi, "")) } } return t }, stripTags: function (t, e) { e = (((e || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join(""); return t.replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>/gi, function (t, i) { return e.indexOf("<" + i.toLowerCase() + ">") > -1 ? t : "" }) }, savePreCode: function (e) { var i = e.match(/<(pre|code)(.*?)>([\w\W]*?)<\/(pre|code)>/gi); return null !== i && t.each(i, t.proxy(function (t, i) { var s = i.match(/<(pre|code)(.*?)>([\w\W]*?)<\/(pre|code)>/i); s[3] = s[3].replace(/<br\s?\/?>/g, "\n"), s[3] = s[3].replace(/&nbsp;/g, " "), this.opts.preSpaces && (s[3] = s[3].replace(/\t/g, Array(this.opts.preSpaces + 1).join(" "))), s[3] = this.clean.encodeEntities(s[3]), s[3] = s[3].replace(/\$/g, "&#36;"), e = e.replace(i, "<" + s[1] + s[2] + ">" + s[3] + "</" + s[1] + ">") }, this)), e }, getTextFromHtml: function (e) { e = e.replace(/<br\s?\/?>|<\/H[1-6]>|<\/p>|<\/div>|<\/li>|<\/td>/gi, "\n"); var i = document.createElement("div"); return i.innerHTML = e, e = i.textContent || i.innerText, t.trim(e) }, getPlainText: function (t, e) { return t = (t = this.clean.getTextFromHtml(t)).replace(/\n/g, "<br />"), this.opts.paragraphize && void 0 === e && (t = this.paragraphize.load(t)), t }, getPreCode: function (t) { return t = (t = t.replace(/<img(.*?) style="(.*?)"(.*?[^>])>/gi, "<img$1$3>")).replace(/<img(.*?)>/gi, "&lt;img$1&gt;"), t = this.clean.getTextFromHtml(t), this.opts.preSpaces && (t = t.replace(/\t/g, Array(this.opts.preSpaces + 1).join(" "))), t = this.clean.encodeEntities(t) }, getOnlyImages: function (t) { return t = (t = (t = t.replace(/<img(.*?)>/gi, "[img$1]")).replace(/<(.*?)>/gi, "")).replace(/\[img(.*?)\]/gi, "<img$1>") }, getOnlyLinksAndImages: function (t) { return t = (t = (t = (t = (t = t.replace(/<a(.*?)href="(.*?)"(.*?)>([\w\W]*?)<\/a>/gi, '[a href="$2"]$4[/a]')).replace(/<img(.*?)>/gi, "[img$1]")).replace(/<(.*?)>/gi, "")).replace(/\[a href="(.*?)"\]([\w\W]*?)\[\/a\]/gi, '<a href="$1">$2</a>')).replace(/\[img(.*?)\]/gi, "<img$1>") }, encodeEntities: function (t) { return (t = String(t).replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"')).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") }, removeDirtyStyles: function (e) { if (this.utils.browser("msie")) return e; var i = document.createElement("div"); return i.innerHTML = e, this.clean.clearUnverifiedRemove(t(i)), e = i.innerHTML, t(i).remove(), e }, clearUnverified: function () { if (!this.utils.browser("msie")) { this.clean.clearUnverifiedRemove(this.$editor); var t = this.$editor.find("h1, h2, h3, h4, h5, h6"); t.find("span").removeAttr("style"), t.find(this.opts.verifiedTags.join(", ")).removeAttr("style"), this.code.sync() } }, clearUnverifiedRemove: function (e) { e.find(this.opts.verifiedTags.join(", ")).removeAttr("style"), e.find("span").not('[data-verified="redactor"]').removeAttr("style"), e.find('span[data-verified="redactor"], img[data-verified="redactor"]').each(function (e, i) { var s = t(i); s.attr("style", s.attr("rel")) }) }, setVerified: function (t) { if (this.utils.browser("msie")) return t; var e = (t = (t = t.replace(new RegExp("<img(.*?[^>])>", "gi"), '<img$1 data-verified="redactor">')).replace(new RegExp("<span(.*?)>", "gi"), '<span$1 data-verified="redactor">')).match(new RegExp('<(span|img)(.*?)style="(.*?)"(.*?[^>])>', "gi")); if (e) for (var i = e.length, s = 0; s < i; s++)try { var r = e[s].replace(/style="(.*?)"/i, 'style="$1" rel="$1"'); t = t.replace(new RegExp(e[s], "gi"), r) } catch (t) { } return t }, convertInline: function (e) { var i = t("<div />").html(e), s = this.opts.inlineTags; return s.push("span"), i.find(s.join(",")).each(function () { var e = t(this), i = this.tagName.toLowerCase(); e.attr("data-redactor-tag", i), "span" == i && (e.attr("style") ? e.attr("data-redactor-style", e.attr("style")) : e.attr("class") && e.attr("data-redactor-class", e.attr("class"))) }), e = i.html(), i.remove(), e }, normalizeLists: function () { this.$editor.find("li").each(function (e, i) { var s = t(i).next(); 0 === s.length || "UL" != s[0].tagName && "OL" != s[0].tagName || t(i).append(s) }) }, removeSpaces: function (t) { return t = (t = (t = (t = (t = (t = (t = (t = t.replace(/\n/g, "")).replace(/[\t]*/g, "")).replace(/\n\s*\n/g, "\n")).replace(/^[\s\n]*/g, " ")).replace(/[\s\n]*$/g, " ")).replace(/>\s{2,}</g, "> <")).replace(/\n\n/g, "\n")).replace(/[\u200B-\u200D\uFEFF]/g, "") }, replaceDivs: function (t) { return t = this.opts.linebreaks ? (t = t.replace(/<div><br\s?\/?><\/div>/gi, "<br />")).replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, "$2<br />") : t.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, "<p$1>$2</p>") }, replaceDivsToBr: function (t) { return t = (t = (t = t.replace(/<div\s(.*?)>/gi, "<p>")).replace(/<div><br\s?\/?><\/div>/gi, "<br /><br />")).replace(/<div>([\w\W]*?)<\/div>/gi, "$1<br /><br />") }, replaceParagraphsToBr: function (t) { return t = (t = (t = (t = t.replace(/<p\s(.*?)>/gi, "<p>")).replace(/<p><br\s?\/?><\/p>/gi, "<br />")).replace(/<p>([\w\W]*?)<\/p>/gi, "$1<br /><br />")).replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, "</blockquote>") }, saveFormTags: function (t) { return t.replace(/<form(.*?)>([\w\W]*?)<\/form>/gi, '<section$1 rel="redactor-form-tag">$2</section>') }, restoreFormTags: function (t) { return t.replace(/<section(.*?) rel="redactor-form-tag"(.*?)>([\w\W]*?)<\/section>/gi, "<form$1$2>$3</form>") } } }, code: function () { return { set: function (e) { e = t.trim(e.toString()), e = this.clean.onSet(e), this.$editor.html(e), this.code.sync(), setTimeout(t.proxy(this.buffer.add, this), 15), !1 === this.start && this.observe.load() }, get: function () { var t = this.$textarea.val(); return t = this.tabifier.get(t) }, sync: function () { setTimeout(t.proxy(this.code.startSync, this), 10) }, startSync: function () { var t = this.$editor.html(); this.code.syncCode && this.code.syncCode == t || (this.code.syncCode = t, t = this.core.setCallback("syncBefore", t), t = this.clean.onSync(t), this.$textarea.val(t), this.core.setCallback("sync", t), !1 === this.start && this.core.setCallback("change", t), this.start = !1, this.autosave.onChange()) }, toggle: function () { this.opts.visual ? this.code.showCode() : this.code.showVisual() }, showCode: function () { this.code.offset = this.caret.getOffset(); var e = t(window).scrollTop(), i = this.$editor.innerHeight(); this.$editor.hide(); var s = this.$textarea.val(); this.modified = this.clean.removeSpaces(s), s = this.tabifier.get(s), this.$textarea.val(s).height(i).show().focus(), this.$textarea.on("keydown.redactor-textarea-indenting", this.code.textareaIndenting), t(window).scrollTop(e), this.$textarea[0].setSelectionRange && this.$textarea[0].setSelectionRange(0, 0), this.$textarea[0].scrollTop = 0, this.opts.visual = !1, this.button.setInactiveInCode(), this.button.setActive("html"), this.core.setCallback("source", s) }, showVisual: function () { if (!this.opts.visual) { var t = this.$textarea.hide().val(); this.modified !== this.clean.removeSpaces(t) && this.code.set(t), this.$editor.show(), this.utils.isEmpty(t) || this.placeholder.remove(), this.caret.setOffset(this.code.offset), this.$textarea.off("keydown.redactor-textarea-indenting"), this.button.setActiveInVisual(), this.button.setInactive("html"), this.observe.load(), this.opts.visual = !0 } }, textareaIndenting: function (t) { if (9 !== t.keyCode) return !0; var e = this.$textarea, i = e.get(0).selectionStart; return e.val(e.val().substring(0, i) + "\t" + e.val().substring(e.get(0).selectionEnd)), e.get(0).selectionStart = e.get(0).selectionEnd = i + 1, !1 } } }, core: function () { return { getObject: function () { return t.extend({}, this) }, getEditor: function () { return this.$editor }, getBox: function () { return this.$box }, getElement: function () { return this.$element }, getTextarea: function () { return this.$textarea }, getToolbar: function () { return !!this.$toolbar && this.$toolbar }, addEvent: function (t) { this.core.event = t }, getEvent: function () { return this.core.event }, setCallback: function (e, i, s) { var r = this.opts[e + "Callback"]; return t.isFunction(r) ? void 0 === s ? r.call(this, i) : r.call(this, i, s) : void 0 === s ? i : s }, destroy: function () { this.core.setCallback("destroy"), this.$element.off(".redactor").removeData("redactor"), this.$editor.off(".redactor"), this.$editor.removeClass("redactor-editor redactor-linebreaks redactor-placeholder"), this.$editor.removeAttr("contenteditable"); var e = this.code.get(); this.build.isTextarea() ? (this.$box.after(this.$element), this.$box.remove(), this.$element.val(e).show()) : (this.$box.after(this.$editor), this.$box.remove(), this.$element.html(e).show()), this.$pasteBox && this.$pasteBox.remove(), this.$modalBox && this.$modalBox.remove(), this.$modalOverlay && this.$modalOverlay.remove(), t(".redactor-toolbar-tooltip").remove(), clearInterval(this.autosaveInterval) } } }, dropdown: function () { return { build: function (e, i, s) { "formatting" == e && this.opts.formattingAdd && t.each(this.opts.formattingAdd, t.proxy(function (t, e) { var i = e.tag; void 0 !== e.class && (i = i + "-" + e.class), e.type = this.utils.isBlockTag(e.tag) ? "block" : "inline"; var r = "inline" == e.type ? "inline.formatting" : "block.formatting"; this.opts.linebreaks && "block" == e.type && "p" == e.tag || (this.formatting[i] = { tag: e.tag, style: e.style, class: e.class, attr: e.attr, data: e.data }, s[i] = { func: r, title: e.title }) }, this)), t.each(s, t.proxy(function (s, r) { var o = t('<a href="#" class="redactor-dropdown-' + s + '">' + r.title + "</a>"); "formatting" == e && o.addClass("redactor-formatting-" + s), o.on("click", t.proxy(function (t) { var e = "func", i = r.func; r.command ? (e = "command", i = r.command) : r.dropdown && (e = "dropdown", i = r.dropdown), this.button.onClick(t, s, e, i) }, this)), i.append(o) }, this)) }, show: function (e, i) { if (!this.opts.visual) return e.preventDefault(), !1; var s = this.button.get(i), r = s.data("dropdown").appendTo(document.body); if (document.activeElement.blur(), s.hasClass("dropact")) this.dropdown.hideAll(); else { this.dropdown.hideAll(), this.core.setCallback("dropdownShow", { dropdown: r, key: i, button: s }), this.button.setActive(i), s.addClass("dropact"); var o = s.offset(), a = r.width(); o.left + a > t(document).width() && (o.left -= a); var n = o.left + "px"; if (this.$toolbar.hasClass("toolbar-fixed-box")) { var l = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset, c = "fixed"; this.opts.toolbarFixedTarget !== document && (l = this.$toolbar.innerHeight() + this.$toolbar.offset().top + this.opts.toolbarFixedTopOffset, c = "absolute"), r.css({ position: c, left: n, top: l + "px" }).show() } else { l = s.innerHeight() + o.top + "px"; r.css({ position: "absolute", left: n, top: l }).show() } this.core.setCallback("dropdownShown", { dropdown: r, key: i, button: s }) } t(document).one("click", t.proxy(this.dropdown.hide, this)), this.$editor.one("click", t.proxy(this.dropdown.hide, this)); var h = t(document.body), d = h.width(); r.on("mouseover", function () { h.addClass("body-hidden"), h.css("margin-right", h.width() - d + "px") }), r.on("mouseout", function () { h.removeClass("body-hidden").css("margin-right", 0) }), e.stopPropagation() }, hideAll: function () { this.$toolbar.find("a.dropact").removeClass("redactor-act").removeClass("dropact"), t(document.body).removeClass("body-hidden").css("margin-right", 0), t(".redactor-dropdown").hide(), this.core.setCallback("dropdownHide") }, hide: function (e) { var i = t(e.target); i.hasClass("dropact") || (i.removeClass("dropact"), this.dropdown.hideAll()) } } }, file: function () { return { show: function () { this.modal.load("file", this.lang.get("file"), 700), this.upload.init("#redactor-modal-file-upload", this.opts.fileUpload, this.file.insert), this.selection.save(), this.selection.get(); var e = this.sel.toString(); t("#redactor-filename").val(e), this.modal.show() }, insert: function (e, i, s) { if (void 0 !== e.error) return this.modal.close(), this.selection.restore(), void this.core.setCallback("fileUploadError", e); var r; if ("string" == typeof e) r = e; else { var o = t("#redactor-filename").val(); void 0 !== o && "" !== o || (o = e.filename), r = '<a href="' + e.filelink + '" id="filelink-marker">' + o + "</a>" } if (i) { this.selection.removeMarkers(); var a = this.selection.getMarker(); this.insert.nodeToCaretPositionFromPoint(s, a) } else this.modal.close(); if (this.selection.restore(), this.buffer.set(), this.insert.html(r), "string" != typeof e) { var n = t(this.$editor.find("a#filelink-marker")); 0 !== n.size() ? n.removeAttr("id") : n = !1, this.core.setCallback("fileUpload", n, e) } } } }, focus: function () { return { setStart: function () { this.$editor.focus(); var t = this.$editor.children().first(); if (0 !== t.size() && 0 !== t[0].length && "BR" != t[0].tagName && 3 != t[0].nodeType) { if ("UL" == t[0].tagName || "OL" == t[0].tagName) { var e = (t = t.find("li").first()).children().first(); if (!this.utils.isBlock(e) && "" === e.text()) return void this.caret.setStart(e) } if (this.opts.linebreaks && !this.utils.isBlockTag(t[0].tagName)) return this.selection.get(), this.range.setStart(this.$editor[0], 0), this.range.setEnd(this.$editor[0], 0), void this.selection.addRange(); this.caret.setStart(t) } }, setEnd: function () { if (this.utils.browser("mozilla") || this.utils.browser("msie")) { var t = this.$editor.children().last(); this.caret.setEnd(t) } else { this.selection.get(); try { this.range.selectNodeContents(this.$editor[0]), this.range.collapse(!1), this.selection.addRange() } catch (t) { } } }, isFocused: function () { var e = document.getSelection().focusNode; return null !== e && (!(!this.opts.linebreaks || !t(e.parentNode).hasClass("redactor-linebreaks")) || !!this.utils.isRedactorParent(e.parentNode) && this.$editor.is(":focus")) } } }, image: function () { return { show: function () { this.modal.load("image", this.lang.get("image"), 700), this.upload.init("#redactor-modal-image-droparea", this.opts.imageUpload, this.image.insert), this.selection.save(), this.modal.show() }, showEdit: function (e) { var i = e.closest("a"); if (this.modal.load("imageEdit", this.lang.get("edit"), 705), this.modal.createCancelButton(), this.image.buttonDelete = this.modal.createDeleteButton(this.lang.get("_delete")), this.image.buttonSave = this.modal.createActionButton(this.lang.get("save")), this.image.buttonDelete.on("click", t.proxy(function () { this.image.remove(e) }, this)), this.image.buttonSave.on("click", t.proxy(function () { this.image.update(e) }, this)), t("#redactor-image-title").val(e.attr("alt")), this.opts.imageLink) { var s = t("#redactor-image-link"); s.attr("href", e.attr("src")), 0 !== i.size() && (s.val(i.attr("href")), "_blank" == i.attr("target") && t("#redactor-image-link-blank").prop("checked", !0)) } else t(".redactor-image-link-option").hide(); if (this.opts.imagePosition) { var r = "block" == e.css("display") && "none" == e.css("float") ? "center" : e.css("float"); t("#redactor-image-align").val(r) } else t(".redactor-image-position-option").hide(); this.modal.show() }, setFloating: function (e) { var i = "", s = "", r = ""; switch (t("#redactor-image-align").val()) { case "left": i = "left", r = "0 " + this.opts.imageFloatMargin + " " + this.opts.imageFloatMargin + " 0"; break; case "right": i = "right", r = "0 0 " + this.opts.imageFloatMargin + " " + this.opts.imageFloatMargin; break; case "center": s = "block", r = "auto" }e.css({ float: i, display: s, margin: r }), e.attr("rel", e.attr("style")) }, update: function (e) { this.image.hideResize(), this.buffer.set(); var i = e.closest("a"); e.attr("alt", t("#redactor-image-title").val()), this.image.setFloating(e); var s = t.trim(t("#redactor-image-link").val()); if ("" !== s) { var r = !!t("#redactor-image-link-blank").prop("checked"); if (0 === i.size()) { var o = t('<a href="' + s + '">' + this.utils.getOuterHtml(e) + "</a>"); r && o.attr("target", "_blank"), e.replaceWith(o) } else i.attr("href", s), r ? i.attr("target", "_blank") : i.removeAttr("target") } else 0 !== i.size() && i.replaceWith(this.utils.getOuterHtml(e)); this.modal.close(), this.observe.images(), this.code.sync() }, setEditable: function (e) { this.opts.imageEditable && (e.on("dragstart", t.proxy(this.image.onDrag, this)), e.on("mousedown", t.proxy(this.image.hideResize, this)), e.on("click touchstart", t.proxy(function (i) { if (this.observe.image = e, 0 !== this.$editor.find("#redactor-image-box").size()) return !1; this.image.resizer = this.image.loadEditableControls(e), t(document).on("click.redactor-image-resize-hide", t.proxy(this.image.hideResize, this)), this.$editor.on("click.redactor-image-resize-hide", t.proxy(this.image.hideResize, this)), this.opts.imageResizable && this.image.resizer.on("mousedown.redactor touchstart.redactor", t.proxy(function (t) { t.preventDefault(), this.image.resizeHandle = { x: t.pageX, y: t.pageY, el: e, ratio: e.width() / e.height(), h: e.height() }, (t = t.originalEvent || t).targetTouches && (this.image.resizeHandle.x = t.targetTouches[0].pageX, this.image.resizeHandle.y = t.targetTouches[0].pageY), this.image.startResize() }, this)) }, this))) }, startResize: function () { t(document).on("mousemove.redactor-image-resize touchmove.redactor-image-resize", t.proxy(this.image.moveResize, this)), t(document).on("mouseup.redactor-image-resize touchend.redactor-image-resize", t.proxy(this.image.stopResize, this)) }, moveResize: function (t) { t.preventDefault(), t = t.originalEvent || t; var e = this.image.resizeHandle.h; t.targetTouches ? e += t.targetTouches[0].pageY - this.image.resizeHandle.y : e += t.pageY - this.image.resizeHandle.y; var i = Math.round(e * this.image.resizeHandle.ratio); e < 50 || i < 100 || (this.image.resizeHandle.el.height(e), this.image.resizeHandle.el.width(i), this.code.sync()) }, stopResize: function () { this.handle = !1, t(document).off(".redactor-image-resize"), this.image.hideResize() }, onDrag: function (e) { if (0 !== this.$editor.find("#redactor-image-box").size()) return e.preventDefault(), !1; this.$editor.on("drop.redactor-image-inside-drop", t.proxy(function () { setTimeout(t.proxy(this.image.onDrop, this), 1) }, this)) }, onDrop: function () { this.image.fixImageSourceAfterDrop(), this.observe.images(), this.$editor.off("drop.redactor-image-inside-drop"), this.clean.clearUnverified(), this.code.sync() }, fixImageSourceAfterDrop: function () { this.$editor.find("img[data-save-url]").each(function () { var e = t(this); e.attr("src", e.attr("data-save-url")), e.removeAttr("data-save-url") }) }, hideResize: function (e) { if (!e || 0 === t(e.target).closest("#redactor-image-box").length) { if (e && "IMG" == e.target.tagName) { var i = t(e.target); i.attr("data-save-url", i.attr("src")) } var s = this.$editor.find("#redactor-image-box"); 0 !== s.size() && (this.image.editter.remove(), t(this.image.resizer).remove(), s.find("img").css({ marginTop: s[0].style.marginTop, marginBottom: s[0].style.marginBottom, marginLeft: s[0].style.marginLeft, marginRight: s[0].style.marginRight }), s.css("margin", ""), s.find("img").css("opacity", ""), s.replaceWith(function () { return t(this).contents() }), t(document).off("click.redactor-image-resize-hide"), this.$editor.off("click.redactor-image-resize-hide"), void 0 !== this.image.resizeHandle && this.image.resizeHandle.el.attr("rel", this.image.resizeHandle.el.attr("style")), this.code.sync()) } }, loadEditableControls: function (e) { var i = t('<span id="redactor-image-box" data-redactor="verified">'); i.css("float", e.css("float")).attr("contenteditable", !1), "auto" != e[0].style.margin ? (i.css({ marginTop: e[0].style.marginTop, marginBottom: e[0].style.marginBottom, marginLeft: e[0].style.marginLeft, marginRight: e[0].style.marginRight }), e.css("margin", "")) : i.css({ display: "block", margin: "auto" }), e.css("opacity", ".5").after(i), this.image.editter = t('<span id="redactor-image-editter" data-redactor="verified">' + this.lang.get("edit") + "</span>"), this.image.editter.attr("contenteditable", !1), this.image.editter.on("click", t.proxy(function () { this.image.showEdit(e) }, this)), i.append(this.image.editter); var s = this.image.editter.innerWidth(); if (this.image.editter.css("margin-left", "-" + s / 2 + "px"), this.opts.imageResizable && !this.utils.isMobile()) { var r = t('<span id="redactor-image-resizer" data-redactor="verified"></span>'); return this.utils.isDesktop() || r.css({ width: "15px", height: "15px" }), r.attr("contenteditable", !1), i.append(r), i.append(e), r } return i.append(e), !1 }, remove: function (e) { var i, s = t(e), r = s.closest("a"), o = s.closest("figure"), a = s.parent(); 0 !== t("#redactor-image-box").size() && (a = t("#redactor-image-box").parent()), 0 !== o.size() ? (i = o.next(), o.remove()) : 0 !== r.size() ? (a = r.parent(), r.remove()) : s.remove(), t("#redactor-image-box").remove(), 0 !== o.size() ? this.caret.setStart(i) : this.caret.setStart(a), this.core.setCallback("imageDelete", s[0].src, s), this.modal.close(), this.code.sync() }, insert: function (e, i, s) { if (void 0 !== e.error) return this.modal.close(), this.selection.restore(), void this.core.setCallback("imageUploadError", e); var r; "string" == typeof e ? r = t(e).attr("data-redactor-inserted-image", "true") : (r = t("<img>")).attr("src", e.filelink).attr("data-redactor-inserted-image", "true"); var o = r, a = this.utils.isCurrentOrParent("P"); if (a && (o = t("<blockquote />").append(r)), i) { this.selection.removeMarkers(); var n = this.selection.getMarker(); this.insert.nodeToCaretPositionFromPoint(s, n) } else this.modal.close(); this.selection.restore(), this.buffer.set(), this.insert.html(this.utils.getOuterHtml(o), !1); var l = this.$editor.find("img[data-redactor-inserted-image=true]").removeAttr("data-redactor-inserted-image"); a ? l.parent().contents().unwrap().wrap("<p />") : this.opts.linebreaks && l.before("<br>").after("<br>"), "string" != typeof e && this.core.setCallback("imageUpload", l, e) } } }, indent: function () { return { increase: function () { this.utils.browser("msie") || this.$editor.focus(), this.buffer.set(), this.selection.save(); var t = this.selection.getBlock(); t && "LI" == t.tagName ? this.indent.increaseLists() : !1 === t && this.opts.linebreaks ? this.indent.increaseText() : this.indent.increaseBlocks(), this.selection.restore(), this.code.sync() }, increaseLists: function () { document.execCommand("indent"), this.indent.fixEmptyIndent(), this.clean.normalizeLists(), this.clean.clearUnverified() }, increaseBlocks: function () { t.each(this.selection.getBlocks(), t.proxy(function (t, e) { if ("TD" !== e.tagName && "TH" !== e.tagName) { var i = this.utils.getAlignmentElement(e), s = this.utils.normalize(i.css("margin-left")) + this.opts.indentValue; i.css("margin-left", s + "px") } }, this)) }, increaseText: function () { var e = this.selection.wrap("div"); t(e).attr("data-tagblock", "redactor"), t(e).css("margin-left", this.opts.indentValue + "px") }, decrease: function () { this.buffer.set(), this.selection.save(); var t = this.selection.getBlock(); t && "LI" == t.tagName ? this.indent.decreaseLists() : this.indent.decreaseBlocks(), this.selection.restore(), this.code.sync() }, decreaseLists: function () { document.execCommand("outdent"); var e = this.selection.getCurrent(), i = t(e).closest("li"), s = i.parent(); 0 !== i.size() && 0 !== s.size() && "LI" == s[0].tagName && s.after(i), this.indent.fixEmptyIndent(), this.opts.linebreaks || 0 !== i.size() || (document.execCommand("formatblock", !1, "p"), this.$editor.find("ul, ol, blockquote, p").each(t.proxy(this.utils.removeEmpty, this))), this.clean.clearUnverified() }, decreaseBlocks: function () { t.each(this.selection.getBlocks(), t.proxy(function (t, e) { var i = this.utils.getAlignmentElement(e), s = this.utils.normalize(i.css("margin-left")) - this.opts.indentValue; s <= 0 ? this.opts.linebreaks && void 0 !== i.data("tagblock") ? i.replaceWith(i.html() + "<br />") : (i.css("margin-left", ""), this.utils.removeEmptyAttr(i, "style")) : i.css("margin-left", s + "px") }, this)) }, fixEmptyIndent: function () { var e = this.selection.getBlock(); if (this.range.collapsed && e && "LI" == e.tagName && this.utils.isEmpty(t(e).text())) { var i = t(e); i.find("span").not(".redactor-selection-marker").contents().unwrap(), i.append("<br>") } } } }, inline: function () { return { formatting: function (t) { var e, i; void 0 !== this.formatting[t].style ? e = "style" : void 0 !== this.formatting[t].class && (e = "class"), e && (i = this.formatting[t][e]), this.inline.format(this.formatting[t].tag, e, i) }, format: function (t, e, i) { if (!this.utils.isCurrentOrParent("PRE")) { for (var s = ["b", "bold", "i", "italic", "underline", "strikethrough", "deleted", "superscript", "subscript"], r = ["strong", "strong", "em", "em", "u", "del", "del", "sup", "sub"], o = 0; o < s.length; o++)t == s[o] && (t = r[o]); this.inline.type = e || !1, this.inline.value = i || !1, this.buffer.set(), this.$editor.focus(), this.selection.get(), this.range.collapsed ? this.inline.formatCollapsed(t) : this.inline.formatMultiple(t) } }, formatCollapsed: function (e) { var i = this.selection.getCurrent(), s = t(i).closest(e + "[data-redactor-tag=" + e + "]"); if (0 !== s.size()) return this.caret.setAfter(s[0]), this.utils.isEmpty(s.text()) && s.remove(), void this.code.sync(); var r = t("<" + e + ">").attr("data-verified", "redactor").attr("data-redactor-tag", e); r.html(this.opts.invisibleSpace), r = this.inline.setFormat(r), this.insert.node(r), this.caret.setEnd(r), this.code.sync() }, formatMultiple: function (e) { if (this.inline.formatConvert(e), this.selection.save(), document.execCommand("strikethrough"), this.$editor.find("strike").each(t.proxy(function (i, s) { var r, o = t(s); if (this.inline.formatRemoveSameChildren(o, e), this.inline.type ? (r = t("<span>").attr("data-redactor-tag", e).attr("data-verified", "redactor"), r = this.inline.setFormat(r)) : r = t("<" + e + ">").attr("data-redactor-tag", e).attr("data-verified", "redactor"), o.replaceWith(r.html(o.contents())), "span" == e) { var a = r.parent(); if (a && "SPAN" == a[0].tagName && "style" == this.inline.type) for (var n = this.inline.value.split(";"), l = 0; l < n.length; l++) { if ("" === n[l]) return; var c = n[l].split(":"); a.css(c[0], ""), this.utils.removeEmptyAttr(a, "style") && a.replaceWith(a.contents()) } } }, this)), "span" != e && this.$editor.find(this.opts.inlineTags.join(", ")).each(t.proxy(function (e, i) { var s = t(i); "line-through" == s.css("text-decoration") && (s.css("text-decoration", ""), this.utils.removeEmptyAttr(s, "style")) }, this)), "del" != e) { var i = this; this.$editor.find("inline").each(function (t, e) { i.utils.replaceToTag(e, "del") }) } this.selection.restore(), this.code.sync() }, formatRemoveSameChildren: function (e, i) { e.children(i).each(function () { var e = t(this); e.hasClass("redactor-selection-marker") || e.contents().unwrap() }) }, formatConvert: function (e) { this.selection.save(); var i = ""; if ("class" == this.inline.type ? i = "[data-redactor-class=" + this.inline.value + "]" : "style" == this.inline.type && (i = '[data-redactor-style="' + this.inline.value + '"]'), "del" != e) { var s = this; this.$editor.find("del").each(function (t, e) { s.utils.replaceToTag(e, "inline") }) } this.$editor.find('[data-redactor-tag="' + e + '"]' + i).each(function () { if ("" !== i || "span" != e || this.tagName.toLowerCase() != e) { var s = t(this); s.replaceWith(t("<strike />").html(s.contents())) } }), this.selection.restore() }, setFormat: function (t) { switch (this.inline.type) { case "class": t.hasClass(this.inline.value) ? (t.removeClass(this.inline.value), t.removeAttr("data-redactor-class")) : (t.addClass(this.inline.value), t.attr("data-redactor-class", this.inline.value)); break; case "style": t[0].style.cssText = this.inline.value, t.attr("data-redactor-style", this.inline.value) }return t }, removeStyle: function () { this.buffer.set(); var e = this.selection.getCurrent(), i = this.selection.getInlines(); if (this.selection.save(), e && "SPAN" === e.tagName) { var s = t(e); s.removeAttr("style"), 0 === s[0].attributes.length && s.replaceWith(s.contents()) } t.each(i, t.proxy(function (e, i) { var s = t(i); -1 == t.inArray(i.tagName.toLowerCase(), this.opts.inlineTags) || s.hasClass("redactor-selection-marker") || (s.removeAttr("style"), 0 === s[0].attributes.length && s.replaceWith(s.contents())) }, this)), this.selection.restore(), this.code.sync() }, removeStyleRule: function (e) { this.buffer.set(); var i = this.selection.getParent(), s = this.selection.getInlines(); if (this.selection.save(), i && "SPAN" === i.tagName) { var r = t(i); r.css(e, ""), this.utils.removeEmptyAttr(r, "style"), 0 === r[0].attributes.length && r.replaceWith(r.contents()) } t.each(s, t.proxy(function (i, s) { var r = t(s); -1 == t.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) || r.hasClass("redactor-selection-marker") || (r.css(e, ""), this.utils.removeEmptyAttr(r, "style"), 0 === r[0].attributes.length && r.replaceWith(r.contents())) }, this)), this.selection.restore(), this.code.sync() }, removeFormat: function () { this.buffer.set(); var e = this.selection.getCurrent(); this.selection.save(), document.execCommand("removeFormat"), e && "SPAN" === e.tagName && t(e).replaceWith(t(e).contents()), t.each(this.selection.getNodes(), t.proxy(function (e, i) { var s = t(i); -1 == t.inArray(i.tagName.toLowerCase(), this.opts.inlineTags) || s.hasClass("redactor-selection-marker") || s.replaceWith(s.contents()) }, this)), this.selection.restore(), this.code.sync() }, toggleClass: function (t) { this.inline.format("span", "class", t) }, toggleStyle: function (t) { this.inline.format("span", "style", t) } } }, insert: function () { return { set: function (e, i) { this.placeholder.remove(), e = this.clean.setVerified(e), void 0 === i && (e = this.clean.onPaste(e, !1)), this.$editor.html(e), this.selection.remove(), this.focus.setEnd(), this.clean.normalizeLists(), this.code.sync(), this.observe.load(), void 0 === i && setTimeout(t.proxy(this.clean.clearUnverified, this), 10) }, text: function (e) { if (this.placeholder.remove(), e = e.toString(), e = t.trim(e), e = this.clean.getPlainText(e, !1), this.$editor.focus(), this.utils.browser("msie")) this.insert.htmlIe(e); else { this.selection.get(), this.range.deleteContents(); var i = document.createElement("div"); i.innerHTML = e; for (var s, r, o = document.createDocumentFragment(); s = i.firstChild;)r = o.appendChild(s); if (this.range.insertNode(o), r) { var a = this.range.cloneRange(); a.setStartAfter(r), a.collapse(!0), this.sel.removeAllRanges(), this.sel.addRange(a) } } this.code.sync(), this.clean.clearUnverified() }, htmlWithoutClean: function (t) { this.insert.html(t, !1) }, html: function (e, i) { this.placeholder.remove(), void 0 === i && (i = !0), this.$editor.focus(), e = this.clean.setVerified(e), i && (e = this.clean.onPaste(e)), this.utils.browser("msie") ? this.insert.htmlIe(e) : (this.clean.singleLine ? this.insert.execHtml(e) : document.execCommand("insertHTML", null, e), this.insert.htmlFixMozilla()), this.clean.normalizeLists(), this.opts.linebreaks || this.$editor.find("p").each(t.proxy(this.utils.removeEmpty, this)), this.code.sync(), this.observe.load(), i && this.clean.clearUnverified() }, htmlFixMozilla: function () { if (this.utils.browser("mozilla")) { var e = t(this.selection.getBlock()).next(); e.length > 0 && "P" == e[0].tagName && "" === e.html() && e.remove() } }, htmlIe: function (e) { if (this.utils.isIe11()) { var i = this.utils.isCurrentOrParent("P"), s = t("<div>").append(e).contents().is("p, :header, dl, ul, ol, div, table, td, blockquote, pre, address, section, header, footer, aside, article"); i && s ? this.insert.ie11FixInserting(i, e) : this.insert.ie11PasteFrag(e) } else document.selection.createRange().pasteHTML(e) }, execHtml: function (t) { t = this.clean.setVerified(t), this.selection.get(), this.range.deleteContents(); var e = document.createElement("div"); e.innerHTML = t; for (var i, s, r = document.createDocumentFragment(); i = e.firstChild;)s = r.appendChild(i); this.range.insertNode(r), this.range.collapse(!0), this.caret.setAfter(s) }, node: function (e, i) { e = e[0] || e; var s = this.utils.getOuterHtml(e); return s = this.clean.setVerified(s), e = t(s)[0], this.selection.get(), !1 !== i && this.range.deleteContents(), this.range.insertNode(e), this.range.collapse(!1), this.selection.addRange(), e }, nodeToPoint: function (t, e, i) { var s; if (t = t[0] || t, this.selection.get(), document.caretPositionFromPoint) { var r = document.caretPositionFromPoint(e, i); this.range.setStart(r.offsetNode, r.offset), this.range.collapse(!0), this.range.insertNode(t) } else if (document.caretRangeFromPoint) (s = document.caretRangeFromPoint(e, i)).insertNode(t); else if (void 0 !== document.body.createTextRange) { (s = document.body.createTextRange()).moveToPoint(e, i); var o = s.duplicate(); o.moveToPoint(e, i), s.setEndPoint("EndToEnd", o), s.select() } }, nodeToCaretPositionFromPoint: function (t, e) { var i; e = e[0] || e; var s = t.clientX, r = t.clientY; if (document.caretPositionFromPoint) { var o = document.caretPositionFromPoint(s, r); (i = document.getSelection().getRangeAt(0)).setStart(o.offsetNode, o.offset), i.collapse(!0), i.insertNode(e) } else if (document.caretRangeFromPoint) (i = document.caretRangeFromPoint(s, r)).insertNode(e); else if (void 0 !== document.body.createTextRange) { (i = document.body.createTextRange()).moveToPoint(s, r); var a = i.duplicate(); a.moveToPoint(s, r), i.setEndPoint("EndToEnd", a), i.select() } }, ie11FixInserting: function (e, i) { var s = document.createElement("span"); s.className = "redactor-ie-paste", this.insert.node(s); var r = t(e).html(); r = "<p>" + r.replace(/<span class="redactor-ie-paste"><\/span>/gi, "</p>" + i + "<p>") + "</p>", t(e).replaceWith(r) }, ie11PasteFrag: function (t) { this.selection.get(), this.range.deleteContents(); var e = document.createElement("div"); e.innerHTML = t; for (var i, s = document.createDocumentFragment(); i = e.firstChild;)s.appendChild(i); this.range.insertNode(s) } } }, keydown: function () { return { init: function (e) { if (!this.rtePaste) { var i = e.which, s = i >= 37 && i <= 40; if (this.keydown.ctrl = e.ctrlKey || e.metaKey, this.keydown.current = this.selection.getCurrent(), this.keydown.parent = this.selection.getParent(), this.keydown.block = this.selection.getBlock(), this.keydown.pre = this.utils.isTag(this.keydown.current, "pre"), this.keydown.blockquote = this.utils.isTag(this.keydown.current, "blockquote"), this.keydown.figcaption = this.utils.isTag(this.keydown.current, "figcaption"), this.shortcuts.init(e, i), this.keydown.checkEvents(s, i), this.keydown.setupBuffer(e, i), this.keydown.addArrowsEvent(s), this.keydown.setupSelectAll(e, i), !1 === this.core.setCallback("keydown", e)) return e.preventDefault(), !1; if (this.opts.enterKey && i === this.keyCode.DOWN && this.keydown.onArrowDown(), !this.opts.enterKey && i === this.keyCode.ENTER) return e.preventDefault(), void (this.range.collapsed || this.range.deleteContents()); if (i == this.keyCode.ENTER && !e.shiftKey && !e.ctrlKey && !e.metaKey) { var r, o; if (!1 === this.core.setCallback("enter", e)) return e.preventDefault(), !1; if (this.keydown.blockquote && !0 === this.keydown.exitFromBlockquote(e)) return !1; if (this.keydown.pre) return this.keydown.insertNewLine(e); if (this.keydown.blockquote || this.keydown.figcaption) return r = this.selection.getCurrent(), 0 !== (o = t(r).next()).size() && "BR" == o[0].tagName ? this.keydown.insertBreakLine(e) : this.utils.isEndOfElement() && r && "SPAN" != r ? this.keydown.insertDblBreakLine(e) : this.keydown.insertBreakLine(e); if (this.opts.linebreaks && !this.keydown.block) return r = this.selection.getCurrent(), o = t(this.keydown.current).next(), !1 !== r && t(r).hasClass("redactor-invisible-space") ? (t(r).remove(), this.keydown.insertDblBreakLine(e)) : 0 === o.length && !1 === r && void 0 !== o.context ? this.keydown.insertDblBreakLine(e) : this.keydown.insertBreakLine(e); if (this.opts.linebreaks && this.keydown.block) setTimeout(t.proxy(this.keydown.replaceDivToBreakLine, this), 1); else if (!this.opts.linebreaks && this.keydown.block && "LI" !== this.keydown.block.tagName) setTimeout(t.proxy(this.keydown.replaceDivToParagraph, this), 1); else if (!this.opts.linebreaks && !this.keydown.block) return this.keydown.insertParagraph(e) } if (i === this.keyCode.ENTER && (e.ctrlKey || e.shiftKey)) return this.keydown.onShiftEnter(e); if (i === this.keyCode.TAB || e.metaKey && 221 === i || e.metaKey && 219 === i) return this.keydown.onTab(e, i); if (i === this.keyCode.BACKSPACE || i === this.keyCode.DELETE) { var a = this.selection.getNodes(); if (a) for (var n, l = a.length, c = 0; c < l; c++) { var h = t(a[c]).children("img"); if (0 !== h.size()) { var d = this; t.each(h, function (e, i) { var s = t(i); "none" == s.css("float") && (d.core.setCallback("imageDelete", i.src, s), n = i) }) } else "IMG" == a[c].tagName && n != a[c] && (this.core.setCallback("imageDelete", a[c].src, t(a[c])), n = a[c]) } } i === this.keyCode.BACKSPACE && (this.keydown.removeInvisibleSpace(), this.keydown.removeEmptyListInTable(e)), this.code.sync() } }, checkEvents: function (t, e) { t || "click" != this.core.getEvent() && "arrow" != this.core.getEvent() || (this.core.addEvent(!1), this.keydown.checkKeyEvents(e) && this.buffer.set()) }, checkKeyEvents: function (e) { var i = this.keyCode, s = [i.BACKSPACE, i.DELETE, i.ENTER, i.SPACE, i.ESC, i.TAB, i.CTRL, i.META, i.ALT, i.SHIFT]; return -1 == t.inArray(e, s) }, addArrowsEvent: function (t) { t && ("click" != this.core.getEvent() && "arrow" != this.core.getEvent() ? this.core.addEvent("arrow") : this.core.addEvent(!1)) }, setupBuffer: function (t, e) { return this.keydown.ctrl && 90 === e && !t.shiftKey && !t.altKey && this.opts.buffer.length ? (t.preventDefault(), void this.buffer.undo()) : this.keydown.ctrl && 90 === e && t.shiftKey && !t.altKey && 0 !== this.opts.rebuffer.length ? (t.preventDefault(), void this.buffer.redo()) : void (this.keydown.ctrl || e != this.keyCode.BACKSPACE && e != this.keyCode.DELETE && (e != this.keyCode.ENTER || t.ctrlKey || t.shiftKey) && e != this.keyCode.SPACE || this.buffer.set()) }, setupSelectAll: function (t, e) { this.keydown.ctrl && 65 === e ? this.utils.enableSelectAll() : e == this.keyCode.LEFT_WIN || this.keydown.ctrl || this.utils.disableSelectAll() }, onArrowDown: function () { for (var t = [this.keydown.blockquote, this.keydown.pre, this.keydown.figcaption], e = 0; e < t.length; e++)if (t[e]) return this.keydown.insertAfterLastElement(t[e]), !1 }, onShiftEnter: function (t) { return this.buffer.set(), this.keydown.blockquote && this.utils.isEndOfElement() ? this.keydown.insertDblBreakLine(t) : this.keydown.insertBreakLine(t) }, onTab: function (t, e) { return !this.opts.tabFocus || (!(!this.utils.isEmpty(this.code.get()) || !1 !== this.opts.tabAsSpaces) || (t.preventDefault(), this.keydown.pre && !t.shiftKey ? (i = this.opts.preSpaces ? document.createTextNode(Array(this.opts.preSpaces + 1).join(" ")) : document.createTextNode("\t"), this.insert.node(i), this.code.sync()) : !1 !== this.opts.tabAsSpaces ? (i = document.createTextNode(Array(this.opts.tabAsSpaces + 1).join(" ")), this.insert.node(i), this.code.sync()) : t.metaKey && 219 === e ? this.indent.decrease() : t.metaKey && 221 === e ? this.indent.increase() : t.shiftKey ? this.indent.decrease() : this.indent.increase(), !1)); var i }, replaceDivToBreakLine: function () { var e = this.selection.getBlock(), i = e.innerHTML.replace(/<br\s?\/?>/gi, ""); if (("DIV" === e.tagName || "P" === e.tagName) && "" === i && !t(e).hasClass("redactor-editor")) { var s = document.createElement("br"); return t(e).replaceWith(s), this.caret.setBefore(s), this.code.sync(), !1 } }, replaceDivToParagraph: function () { var e = this.selection.getBlock(), i = e.innerHTML.replace(/<br\s?\/?>/gi, ""); if ("DIV" === e.tagName && "" === i && !t(e).hasClass("redactor-editor")) { var s = document.createElement("p"); return s.innerHTML = this.opts.invisibleSpace, t(e).replaceWith(s), this.caret.setStart(s), this.code.sync(), !1 } this.opts.cleanStyleOnEnter && "P" == e.tagName && t(e).removeAttr("class").removeAttr("style") }, insertParagraph: function (t) { t.preventDefault(), this.selection.get(); var e = document.createElement("p"); return e.innerHTML = this.opts.invisibleSpace, this.range.deleteContents(), this.range.insertNode(e), this.caret.setStart(e), this.code.sync(), !1 }, exitFromBlockquote: function (e) { if (this.utils.isEndOfElement()) { var i = t.trim(t(this.keydown.block).html()); if (-1 != i.search(/(<br\s?\/?>){2}$/i)) { if (e.preventDefault(), this.opts.linebreaks) { var s = document.createElement("br"); t(this.keydown.blockquote).after(s), this.caret.setBefore(s), t(this.keydown.block).html(i.replace(/<br\s?\/?>$/i, "")) } else { var r = t(this.opts.emptyHtml); t(this.keydown.blockquote).after(r), this.caret.setStart(r) } return !0 } } }, insertAfterLastElement: function (e) { if (this.utils.isEndOfElement()) if (this.buffer.set(), this.opts.linebreaks) { var i = t("<div>").append(t.trim(this.$editor.html())).contents(), s = i.last()[0]; if ("SPAN" == s.tagName && "" === s.innerHTML && (s = i.prev()[0]), this.utils.getOuterHtml(s) != this.utils.getOuterHtml(e)) return; var r = document.createElement("br"); t(e).after(r), this.caret.setAfter(r) } else { if (this.$editor.contents().last()[0] !== e) return; var o = t(this.opts.emptyHtml); t(e).after(o), this.caret.setStart(o) } }, insertNewLine: function (t) { t.preventDefault(); var e = document.createTextNode("\n"); return this.selection.get(), this.range.deleteContents(), this.range.insertNode(e), this.caret.setAfter(e), this.code.sync(), !1 }, insertBreakLine: function (t) { return this.keydown.insertBreakLineProcessing(t) }, insertDblBreakLine: function (t) { return this.keydown.insertBreakLineProcessing(t, !0) }, insertBreakLineProcessing: function (t, e) { t.stopPropagation(), this.selection.get(); var i = document.createElement("br"); if (this.range.deleteContents(), this.range.insertNode(i), !0 === e) { var s = document.createElement("br"); this.range.insertNode(s), this.caret.setAfter(s) } else this.caret.setAfter(i); return this.code.sync(), !1 }, removeInvisibleSpace: function () { var e = t(this.keydown.current); 0 === e.text().search(/^\u200B$/g) && e.remove() }, removeEmptyListInTable: function (e) { var i = t(this.keydown.current), s = t(this.keydown.parent), r = i.closest("td"); if (0 !== r.size() && i.closest("li") && 1 === s.children("li").size()) { if (!this.utils.isEmpty(i.text())) return; e.preventDefault(), i.remove(), s.remove(), this.caret.setStart(r) } } } }, keyup: function () { return { init: function (e) { if (!this.rtePaste) { var i = e.which; this.keyup.current = this.selection.getCurrent(), this.keyup.parent = this.selection.getParent(); var s = this.utils.isRedactorParent(t(this.keyup.parent).parent()); return !1 === this.core.setCallback("keyup", e) ? (e.preventDefault(), !1) : (!this.opts.linebreaks && 3 == this.keyup.current.nodeType && this.keyup.current.length <= 1 && (!1 === this.keyup.parent || "BODY" == this.keyup.parent.tagName) && this.keyup.replaceToParagraph(), this.opts.linebreaks || !t(this.keyup.parent).hasClass("redactor-invisible-space") || !1 !== s && "BODY" != s[0].tagName || (t(this.keyup.parent).contents().unwrap(), this.keyup.replaceToParagraph()), this.opts.convertLinks && (this.opts.convertUrlLinks || this.opts.convertImageLinks || this.opts.convertVideoLinks) && i === this.keyCode.ENTER && (this.formatLinkify(this.opts.linkProtocol, this.opts.convertLinks, this.opts.convertUrlLinks, this.opts.convertImageLinks, this.opts.convertVideoLinks, this.opts.linkSize), this.observe.load(), this.code.sync()), i === this.keyCode.DELETE || i === this.keyCode.BACKSPACE ? (this.clean.clearUnverified(), this.observe.image ? (e.preventDefault(), this.image.hideResize(), this.buffer.set(), this.image.remove(this.observe.image), this.observe.image = !1, !1) : (this.$editor.find("p").each(t.proxy(this.utils.removeEmpty, this)), this.keyup.current && "DIV" == this.keyup.current.tagName && this.utils.isEmpty(this.keyup.current.innerHTML) && this.opts.linebreaks && (t(this.keyup.current).after(this.selection.getMarkerAsHtml()), this.selection.restore(), t(this.keyup.current).remove()), this.keyup.formatEmpty(e))) : void 0) } }, replaceToParagraph: function () { var e = t(this.keyup.current), i = t("<p>").append(e.clone()); e.replaceWith(i); var s = t(i).next(); void 0 !== s[0] && "BR" == s[0].tagName && s.remove(), this.caret.setEnd(i) }, formatEmpty: function (e) { var i = t.trim(this.$editor.html()); if (this.utils.isEmpty(i)) return e.preventDefault(), this.opts.linebreaks ? (this.$editor.html(this.selection.getMarkerAsHtml()), this.selection.restore()) : (i = "<p><br /></p>", this.$editor.html(i), this.focus.setStart()), this.code.sync(), !1 } } }, lang: function () { return { load: function () { this.opts.curLang = this.opts.langs[this.opts.lang] }, get: function (t) { return void 0 !== this.opts.curLang[t] ? this.opts.curLang[t] : "" } } }, line: function () { return { insert: function () { this.buffer.set(); var t = this.selection.getBlocks(); !1 !== t[0] && this.line.isExceptLastOrFirst(t) ? this.utils.browser("msie") || this.$editor.focus() : this.utils.browser("msie") ? this.line.insertInIe() : this.line.insertInOthersBrowsers() }, isExceptLastOrFirst: function (e) { var i = ["li", "td", "th", "blockquote", "figcaption", "pre", "dl", "dt", "dd"], s = e[0].tagName.toLowerCase(), r = this.selection.getLastBlock(); r = void 0 === r ? s : r.tagName.toLowerCase(); var o = -1 != t.inArray(s, i), a = -1 != t.inArray(r, i); if (o && a || o) return !0 }, insertInIe: function () { this.utils.saveScroll(), this.buffer.set(), this.insert.node(document.createElement("hr")), this.utils.restoreScroll(), this.code.sync() }, insertInOthersBrowsers: function () { this.buffer.set(); var t = '<p id="redactor-insert-line"><br /></p>'; this.opts.linebreaks && (t = '<br id="redactor-insert-line">'), document.execCommand("insertHTML", !1, "<hr>" + t), this.line.setFocus(), this.code.sync() }, setFocus: function () { var e = this.$editor.find("#redactor-insert-line"); t(e).next()[0] ? (this.caret.setAfter(e), e.remove()) : e.removeAttr("id") } } }, link: function () { return { show: function (e) { void 0 !== e && e.preventDefault && e.preventDefault(), this.modal.load("link", this.lang.get("link_insert"), 600), this.modal.createCancelButton(), this.link.buttonInsert = this.modal.createActionButton(this.lang.get("insert")), this.selection.get(), this.link.getData(), this.link.cleanUrl(), "_blank" == this.link.target && t("#redactor-link-blank").prop("checked", !0), this.link.$inputUrl = t("#redactor-link-url"), this.link.$inputText = t("#redactor-link-url-text"), this.link.$inputText.val(this.link.text), this.link.$inputUrl.val(this.link.url), this.link.buttonInsert.on("click", t.proxy(this.link.insert, this)), t(".redactor-link-tooltip").remove(), this.selection.save(), this.modal.show(), this.link.$inputUrl.focus() }, cleanUrl: function () { var t = self.location.href.replace(/\/$/i, ""); if (this.link.url = this.link.url.replace(t, ""), this.link.url = this.link.url.replace(/^\/#/, "#"), this.link.url = this.link.url.replace("mailto:", ""), !this.opts.linkProtocol) { var e = new RegExp("^(http|ftp|https)://" + self.location.host, "i"); this.link.url = this.link.url.replace(e, "") } }, getData: function () { this.link.$node = !1; var e = t(this.selection.getCurrent()).closest("a"); 0 !== e.size() && "A" === e[0].tagName ? (this.link.$node = e, this.link.url = e.attr("href"), this.link.text = e.text(), this.link.target = e.attr("target")) : (this.link.text = this.sel.toString(), this.link.url = "", this.link.target = "") }, insert: function () { var e = "", i = this.link.$inputUrl.val(), s = this.link.$inputText.val(); if ("" !== t.trim(i)) { if (-1 != i.search("@") && !1 === /(http|ftp|https):\/\//i.test(i)) i = "mailto:" + i; else if (0 !== i.search("#")) { t("#redactor-link-blank").prop("checked") && (e = "_blank"); var r = "((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}", o = new RegExp("^(http|ftp|https)://" + r, "i"), a = new RegExp("^" + r, "i"); -1 == i.search(o) && 0 === i.search(a) && this.opts.linkProtocol && (i = this.opts.linkProtocol + "://" + i) } this.link.set(s, i, e), this.modal.close() } else this.link.$inputUrl.addClass("redactor-input-error").on("keyup", function () { t(this).removeClass("redactor-input-error"), t(this).off("keyup") }) }, set: function (e, i, s) { if (e = t.trim(e.replace(/<|>/g, "")), this.selection.restore(), "" !== e || "" !== i) { if ("" === e && "" !== i && (e = i), this.link.$node) this.buffer.set(), this.link.$node.text(e).attr("href", i), "" !== s ? this.link.$node.attr("target", s) : this.link.$node.removeAttr("target"), this.code.sync(); else { if (this.utils.browser("mozilla") && "" === this.link.text) { var r = t("<a />").attr("href", i).text(e); "" !== s && r.attr("target", s), this.insert.node(r), this.selection.selectElement(r) } else { this.utils.browser("msie") ? (r = t('<a href="' + i + '">').text(e), "" !== s && r.attr("target", s), r = t(this.insert.node(r)), this.selection.selectElement(r)) : (document.execCommand("createLink", !1, i), r = t(this.selection.getCurrent()).closest("a"), "" !== s && r.attr("target", s), r.removeAttr("style"), "" === this.link.text && (r.text(e), this.selection.selectElement(r))) } this.code.sync(), this.core.setCallback("insertedLink", r) } setTimeout(t.proxy(function () { this.observe.links() }, this), 5) } }, unlink: function (e) { void 0 !== e && e.preventDefault && e.preventDefault(); var i = this.selection.getNodes(); if (i) { this.buffer.set(); for (var s = i.length, r = 0; r < s; r++)if ("A" == i[r].tagName) { var o = t(i[r]); o.replaceWith(o.contents()) } t(".redactor-link-tooltip").remove(), this.code.sync() } } } }, list: function () { return { toggle: function (e) { this.utils.browser("msie") || this.$editor.focus(), this.buffer.set(), this.selection.save(); var i, s, r = this.selection.getParent(), o = t(r).closest("ol, ul"); this.utils.isRedactorParent(o) || 0 === o.size() || (o = !1); var a = !1; if (o && o.length) { a = !0; var n = o[0].tagName; i = "orderedlist" === e && "UL" === n, s = "unorderedlist" === e && "OL" === n } i ? this.utils.replaceToTag(o, "ol") : s ? this.utils.replaceToTag(o, "ul") : a ? this.list.remove(e) : this.list.insert(e), this.selection.restore(), this.code.sync() }, insert: function (e) { this.utils.browser("msie") && this.opts.linebreaks ? this.list.insertInIe(e) : document.execCommand("insert" + e); var i = this.selection.getParent(), s = t(i).closest("ol, ul"); if (this.utils.isEmpty(s.find("li").text())) { var r = s.children("li"); r.find("br").remove(), r.append(this.selection.getMarkerAsHtml()) } if (s.length) { var o = s.parent(); this.utils.isRedactorParent(o) && "LI" != o[0].tagName && this.utils.isBlock(o[0]) && o.replaceWith(o.contents()) } this.utils.browser("msie") || this.$editor.focus(), this.clean.clearUnverified() }, insertInIe: function (e) { var i = this.selection.wrap("div"), s = t(i).html(), r = t("orderedlist" == e ? "<ol>" : "<ul>"), o = t("<li>"); if ("" === t.trim(s)) o.append(this.selection.getMarkerAsHtml()), r.append(o), this.$editor.find("#selection-marker-1").replaceWith(r); else { var a = s.split(/<br\s?\/?>/gi); if (a) for (var n = 0; n < a.length; n++)"" !== t.trim(a[n]) && r.append(t("<li>").html(a[n])); else o.append(s), r.append(o); t(i).replaceWith(r) } }, remove: function (e) { document.execCommand("insert" + e); var i = t(this.selection.getCurrent()); this.indent.fixEmptyIndent(), this.opts.linebreaks || 0 !== i.closest("li, th, td").size() || (document.execCommand("formatblock", !1, "p"), this.$editor.find("ul, ol, blockquote").each(t.proxy(this.utils.removeEmpty, this))); var s = t(this.selection.getCurrent()).closest("table"), r = s.prev(); this.opts.linebreaks || 0 === s.size() || 0 === r.size() || "BR" != r[0].tagName || r.remove(), this.clean.clearUnverified() } } }, modal: function () { return { callbacks: {}, loadTemplates: function () { this.opts.modal = { imageEdit: String() + '<section id="redactor-modal-image-edit"><label>' + this.lang.get("title") + '</label><input type="text" id="redactor-image-title" /><label class="redactor-image-link-option">' + this.lang.get("link") + '</label><input type="text" id="redactor-image-link" class="redactor-image-link-option" /><label class="redactor-image-link-option"><input type="checkbox" id="redactor-image-link-blank"> ' + this.lang.get("link_new_tab") + '</label><label class="redactor-image-position-option">' + this.lang.get("image_position") + '</label><select class="redactor-image-position-option" id="redactor-image-align"><option value="none">' + this.lang.get("none") + '</option><option value="left">' + this.lang.get("left") + '</option><option value="center">' + this.lang.get("center") + '</option><option value="right">' + this.lang.get("right") + "</option></select></section>", image: String() + '<section id="redactor-modal-image-insert"><div id="redactor-modal-image-droparea"></div></section>', file: String() + '<section id="redactor-modal-file-insert"><div id="redactor-modal-file-upload-box"><label>' + this.lang.get("filename") + '</label><input type="text" id="redactor-filename" /><br><br><div id="redactor-modal-file-upload"></div></div></section>', link: String() + '<section id="redactor-modal-link-insert"><label>URL</label><input type="url" id="redactor-link-url" /><label>' + this.lang.get("text") + '</label><input type="text" id="redactor-link-url-text" /><label><input type="checkbox" id="redactor-link-blank"> ' + this.lang.get("link_new_tab") + "</label></section>" }, t.extend(this.opts, this.opts.modal) }, addCallback: function (t, e) { this.modal.callbacks[t] = e }, createTabber: function (e) { this.modal.$tabber = t("<div>").attr("id", "redactor-modal-tabber"), e.prepend(this.modal.$tabber) }, addTab: function (e, i, s) { var r = t('<a href="#" rel="tab' + e + '">').text(i); s && r.addClass("active"); var o = this; r.on("click", function (e) { e.preventDefault(), t(".redactor-tab").hide(), t(".redactor-" + t(this).attr("rel")).show(), o.modal.$tabber.find("a").removeClass("active"), t(this).addClass("active") }), this.modal.$tabber.append(r) }, addTemplate: function (t, e) { this.opts.modal[t] = e }, getTemplate: function (t) { return this.opts.modal[t] }, getModal: function () { return this.$modalBody.find("section") }, load: function (t, e, i) { this.modal.templateName = t, this.modal.width = i, this.modal.build(), this.modal.enableEvents(), this.modal.setTitle(e), this.modal.setDraggable(), this.modal.setContent(), void 0 !== this.modal.callbacks[t] && this.modal.callbacks[t].call(this) }, show: function () { document.activeElement.blur(), t(document.body).removeClass("body-hidden"), this.modal.bodyOveflow = t(document.body).css("overflow"), t(document.body).css("overflow", "hidden"), this.utils.isMobile() ? this.modal.showOnMobile() : this.modal.showOnDesktop(), this.$modalOverlay.show(), this.$modalBox.show(), this.modal.setButtonsWidth(), this.utils.saveScroll(), this.utils.isMobile() || (setTimeout(t.proxy(this.modal.showOnDesktop, this), 0), t(window).on("resize.redactor-modal", t.proxy(this.modal.resize, this))), this.core.setCallback("modalOpened", this.modal.templateName, this.$modal), t(document).off("focusin.modal"), this.$modal.find("input[type=text]").on("keydown.redactor-modal", t.proxy(this.modal.setEnter, this)) }, showOnDesktop: function () { var e = this.$modal.outerHeight(), i = t(window).height(), s = t(window).width(); this.modal.width > s ? this.$modal.css({ width: "96%", marginTop: i / 2 - e / 2 + "px" }) : e > i ? this.$modal.css({ width: this.modal.width + "px", marginTop: "20px" }) : this.$modal.css({ width: this.modal.width + "px", marginTop: i / 2 - e / 2 + "px" }) }, showOnMobile: function () { this.$modal.css({ width: "96%", marginTop: "2%" }) }, resize: function () { this.utils.isMobile() ? this.modal.showOnMobile() : this.modal.showOnDesktop() }, setTitle: function (t) { this.$modalHeader.html(t) }, setContent: function () { this.$modalBody.html(this.modal.getTemplate(this.modal.templateName)) }, setDraggable: function () { void 0 !== t.fn.draggable && (this.$modal.draggable({ handle: this.$modalHeader }), this.$modalHeader.css("cursor", "move")) }, setEnter: function (t) { 13 == t.which && (t.preventDefault(), this.$modal.find("button.redactor-modal-action-btn").click()) }, createCancelButton: function () { var e = t("<button>").addClass("redactor-modal-btn redactor-modal-close-btn").html(this.lang.get("cancel")); e.on("click", t.proxy(this.modal.close, this)), this.$modalFooter.append(e) }, createDeleteButton: function (t) { return this.modal.createButton(t, "delete") }, createActionButton: function (t) { return this.modal.createButton(t, "action") }, createButton: function (e, i) { var s = t("<button>").addClass("redactor-modal-btn").addClass("redactor-modal-" + i + "-btn").html(e); return this.$modalFooter.append(s), s }, setButtonsWidth: function () { var t = this.$modalFooter.find("button"), e = t.size(); 0 !== e && t.css("width", 100 / e + "%") }, build: function () { this.modal.buildOverlay(), this.$modalBox = t('<div id="redactor-modal-box" />').hide(), this.$modal = t('<div id="redactor-modal" />'), this.$modalHeader = t("<header />"), this.$modalClose = t('<span id="redactor-modal-close" />').html("&times;"), this.$modalBody = t('<div id="redactor-modal-body" />'), this.$modalFooter = t("<footer />"), this.$modal.append(this.$modalHeader), this.$modal.append(this.$modalClose), this.$modal.append(this.$modalBody), this.$modal.append(this.$modalFooter), this.$modalBox.append(this.$modal), this.$modalBox.appendTo(document.body) }, buildOverlay: function () { this.$modalOverlay = t('<div id="redactor-modal-overlay">').hide(), t("body").prepend(this.$modalOverlay) }, enableEvents: function () { this.$modalClose.on("click.redactor-modal", t.proxy(this.modal.close, this)), t(document).on("keyup.redactor-modal", t.proxy(this.modal.closeHandler, this)), this.$editor.on("keyup.redactor-modal", t.proxy(this.modal.closeHandler, this)), this.$modalBox.on("click.redactor-modal", t.proxy(this.modal.close, this)) }, disableEvents: function () { this.$modalClose.off("click.redactor-modal"), t(document).off("keyup.redactor-modal"), this.$editor.off("keyup.redactor-modal"), this.$modalBox.off("click.redactor-modal"), t(window).off("resize.redactor-modal") }, closeHandler: function (t) { t.which == this.keyCode.ESC && this.modal.close(!1) }, close: function (e) { if (e) { if (!t(e.target).hasClass("redactor-modal-close-btn") && e.target != this.$modalClose[0] && e.target != this.$modalBox[0]) return; e.preventDefault() } this.$modalBox && (this.modal.disableEvents(), this.$modalOverlay.remove(), this.$modalBox.fadeOut("fast", t.proxy(function () { this.$modalBox.remove(), setTimeout(t.proxy(this.utils.restoreScroll, this), 0), void 0 !== e && this.selection.restore(), t(document.body).css("overflow", this.modal.bodyOveflow), this.core.setCallback("modalClosed", this.modal.templateName) }, this))) } } }, observe: function () { return { load: function () { this.observe.images(), this.observe.links() }, buttons: function (e, i) { var s = this.selection.getCurrent(), r = this.selection.getParent(); if (this.button.setInactiveAll(i), !1 !== e || "html" === i) { t.each(this.opts.activeButtonsStates, t.proxy(function (e, i) { var o = t(r).closest(e), a = t(s).closest(e); (0 === o.length || this.utils.isRedactorParent(o)) && this.utils.isRedactorParent(a) && (0 === o.length && 0 === a.closest(e).length || this.button.setActive(i)) }, this)); var o = t(r).closest(this.opts.alignmentTags.toString().toLowerCase()); if (this.utils.isRedactorParent(r) && o.length) { var a = "" === o.css("text-align") ? "left" : o.css("text-align"); this.button.setActive("align" + a) } } else -1 != t.inArray(i, this.opts.activeButtons) && this.button.toggleActive(i) }, addButton: function (t, e) { this.opts.activeButtons.push(e), this.opts.activeButtonsStates[t] = e }, images: function () { this.$editor.find("img").each(t.proxy(function (e, i) { var s = t(i); s.closest("a").on("click", function (t) { t.preventDefault() }), this.utils.browser("msie") && s.attr("unselectable", "on"), this.image.setEditable(s) }, this)), t(document).on("click.redactor-image-delete", t.proxy(function (t) { this.observe.image = !1, "IMG" == t.target.tagName && this.utils.isRedactorParent(t.target) && (this.observe.image = (!this.observe.image || this.observe.image != t.target) && t.target) }, this)) }, links: function () { this.opts.linkTooltip && (this.$editor.find("a").on("touchstart click", t.proxy(this.observe.showTooltip, this)), this.$editor.on("touchstart click.redactor", t.proxy(this.observe.closeTooltip, this)), t(document).on("touchstart click.redactor", t.proxy(this.observe.closeTooltip, this))) }, getTooltipPosition: function (t) { return t.offset() }, showTooltip: function (e) { var i = t(e.target); if (0 !== i.size() && "A" === i[0].tagName) { var s = this.observe.getTooltipPosition(i), r = t('<span class="redactor-link-tooltip"></span>'), o = i.attr("href"); void 0 === o && (o = ""), o.length > 24 && (o = o.substring(0, 24) + "..."); var a = t('<a href="' + i.attr("href") + '" target="_blank" />').html(o).addClass("redactor-link-tooltip-action"), n = t('<a href="#" />').html(this.lang.get("edit")).on("click", t.proxy(this.link.show, this)).addClass("redactor-link-tooltip-action"), l = t('<a href="#" />').html(this.lang.get("unlink")).on("click", t.proxy(this.link.unlink, this)).addClass("redactor-link-tooltip-action"); r.append(a).append(" | ").append(n).append(" | ").append(l), r.css({ top: s.top + 20 + "px", left: s.left + "px" }), t(".redactor-link-tooltip").remove(), t("body").append(r) } }, closeTooltip: function (e) { var i = (e = e.originalEvent || e).target; "A" === i.tagName && this.utils.isRedactorParent(i) || t(i).hasClass("redactor-link-tooltip-action") || t(".redactor-link-tooltip").remove() } } }, paragraphize: function () { return { load: function (e) { return this.opts.linebreaks ? e : "" === e || "<p></p>" === e ? this.opts.emptyHtml : (this.paragraphize.blocks = ["table", "div", "pre", "form", "ul", "ol", "h1", "h2", "h3", "h4", "h5", "h6", "dl", "blockquote", "figcaption", "address", "section", "header", "footer", "aside", "article", "object", "style", "script", "iframe", "select", "input", "textarea", "button", "option", "map", "area", "math", "hr", "fieldset", "legend", "hgroup", "nav", "figure", "details", "menu", "summary", "p"], e += "\n", this.paragraphize.safes = [], this.paragraphize.z = 0, e = e.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, "</blockquote>"), e = this.paragraphize.getSafes(e), e = this.paragraphize.getSafesComments(e), e = this.paragraphize.replaceBreaksToNewLines(e), e = this.paragraphize.replaceBreaksToParagraphs(e), e = this.paragraphize.clear(e), e = (e = this.paragraphize.restoreSafes(e)).replace(new RegExp("<br\\s?/?>\n?<(" + this.paragraphize.blocks.join("|") + ")(.*?[^>])>", "gi"), "<p><br /></p>\n<$1$2>"), t.trim(e)) }, getSafes: function (e) { var i = t("<div />").append(e); return i.find("blockquote p").replaceWith(function () { return t(this).append("<br />").contents() }), e = i.html(), i.find(this.paragraphize.blocks.join(", ")).each(t.proxy(function (t, i) { this.paragraphize.z++ , this.paragraphize.safes[this.paragraphize.z] = i.outerHTML, e = e.replace(i.outerHTML, "\n{replace" + this.paragraphize.z + "}") }, this)), e }, getSafesComments: function (e) { var i = e.match(/<!--([\w\W]*?)-->/gi); return i ? (t.each(i, t.proxy(function (t, i) { this.paragraphize.z++ , this.paragraphize.safes[this.paragraphize.z] = i, e = e.replace(i, "\n{replace" + this.paragraphize.z + "}") }, this)), e) : e }, restoreSafes: function (e) { return t.each(this.paragraphize.safes, function (t, i) { e = e.replace("{replace" + t + "}", i) }), e }, replaceBreaksToParagraphs: function (t) { var e = t.split(new RegExp("\n", "g"), -1); if (t = "", e) for (var i = e.length, s = 0; s < i; s++) { if (!e.hasOwnProperty(s)) return; -1 == e[s].search("{replace") ? (e[s] = e[s].replace(/<p>\n\t?<\/p>/gi, ""), e[s] = e[s].replace(/<p><\/p>/gi, ""), "" !== e[s] && (t += "<p>" + e[s].replace(/^\n+|\n+$/g, "") + "</p>")) : t += e[s] } return t }, replaceBreaksToNewLines: function (t) { return t = (t = (t = (t = (t = t.replace(/<br \/>\s*<br \/>/gi, "\n\n")).replace(/<br\s?\/?>\n?<br\s?\/?>/gi, "\n<br /><br />")).replace(new RegExp("\r\n", "g"), "\n")).replace(new RegExp("\r", "g"), "\n")).replace(new RegExp("/\n\n+/"), "g", "\n\n") }, clear: function (t) { return t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace(new RegExp("</blockquote></p>", "gi"), "</blockquote>")).replace(new RegExp("<p></blockquote>", "gi"), "</blockquote>")).replace(new RegExp("<p><blockquote>", "gi"), "<blockquote>")).replace(new RegExp("<blockquote></p>", "gi"), "<blockquote>")).replace(new RegExp("<p><p ", "gi"), "<p ")).replace(new RegExp("<p><p>", "gi"), "<p>")).replace(new RegExp("</p></p>", "gi"), "</p>")).replace(new RegExp("<p>\\s?</p>", "gi"), "")).replace(new RegExp("\n</p>", "gi"), "</p>")).replace(new RegExp("<p>\t?\t?\n?<p>", "gi"), "<p>")).replace(new RegExp("<p>\t*</p>", "gi"), "") } } }, paste: function () { return { init: function (e) { this.opts.cleanOnPaste && (this.rtePaste = !0, this.buffer.set(), this.selection.save(), this.utils.saveScroll(), this.paste.createPasteBox(), t(window).on("scroll.redactor-freeze", t.proxy(function () { t(window).scrollTop(this.saveBodyScroll) }, this)), setTimeout(t.proxy(function () { var e = this.$pasteBox.html(); this.$pasteBox.remove(), this.selection.restore(), this.utils.restoreScroll(), this.paste.insert(e), t(window).off("scroll.redactor-freeze") }, this), 1)) }, createPasteBox: function () { this.$pasteBox = t("<div>").html(" ").attr("contenteditable", "true").css({ position: "fixed", width: 0, top: 0, left: "-9999px" }), t(document.body).append(this.$pasteBox), this.$pasteBox.focus() }, insert: function (e) { e = this.core.setCallback("pasteBefore", e), e = this.utils.isSelectAll() ? this.clean.onPaste(e, !1) : this.clean.onPaste(e), e = this.core.setCallback("paste", e), this.utils.isSelectAll() ? this.insert.set(e, !1) : this.insert.html(e, !1), this.utils.disableSelectAll(), this.rtePaste = !1, setTimeout(t.proxy(this.clean.clearUnverified, this), 10) } } }, placeholder: function () { return { enable: function () { this.placeholder.is() && (this.$editor.attr("placeholder", this.$element.attr("placeholder")), this.placeholder.toggle(), this.$editor.on("keyup.redactor-placeholder", t.proxy(this.placeholder.toggle, this))) }, toggle: function () { var t = "removeClass"; this.utils.isEmpty(this.$editor.html(), !1) && (t = "addClass"), this.$editor[t]("redactor-placeholder") }, remove: function () { this.$editor.removeClass("redactor-placeholder") }, is: function () { return this.opts.placeholder ? this.$element.attr("placeholder", this.opts.placeholder) : !(void 0 === this.$element.attr("placeholder") || "" === this.$element.attr("placeholder")) } } }, progress: function () { return { show: function () { t(document.body).append(t('<div id="redactor-progress"><span></span></div>')), t("#redactor-progress").fadeIn() }, hide: function () { t("#redactor-progress").fadeOut(1500, function () { t(this).remove() }) } } }, selection: function () { return { get: function () { this.sel = document.getSelection(), document.getSelection && this.sel.getRangeAt && this.sel.rangeCount ? this.range = this.sel.getRangeAt(0) : this.range = document.createRange() }, addRange: function () { try { this.sel.removeAllRanges() } catch (t) { } this.sel.addRange(this.range) }, getCurrent: function () { var t = !1; return this.selection.get(), this.sel && this.sel.rangeCount > 0 && (t = this.sel.getRangeAt(0).startContainer), this.utils.isRedactorParent(t) }, getParent: function (e) { return !!(e = e || this.selection.getCurrent()) && this.utils.isRedactorParent(t(e).parent()[0]) }, getBlock: function (e) { for (e = e || this.selection.getCurrent(); e;) { if (this.utils.isBlockTag(e.tagName)) return !t(e).hasClass("redactor-editor") && e; e = e.parentNode } return !1 }, getInlines: function (e) { if (this.selection.get(), this.range && this.range.collapsed) return !1; var i = []; e = void 0 === e ? this.selection.getNodes() : e; var s = this.opts.inlineTags; return s.push("span"), t.each(e, t.proxy(function (e, r) { -1 != t.inArray(r.tagName.toLowerCase(), s) && i.push(r) }, this)), 0 !== i.length && i }, getBlocks: function (e) { if (this.selection.get(), this.range && this.range.collapsed) return [this.selection.getBlock()]; var i = []; return e = void 0 === e ? this.selection.getNodes() : e, t.each(e, t.proxy(function (t, e) { this.utils.isBlock(e) && (this.selection.lastBlock = e, i.push(e)) }, this)), 0 === i.length ? [this.selection.getBlock()] : i }, getLastBlock: function () { return this.selection.lastBlock }, getNodes: function () { this.selection.get(); var e = this.selection.getNodesMarker(1), i = this.selection.getNodesMarker(2); this.selection.setNodesMarker(this.range, e, !0), !1 === this.range.collapsed ? this.selection.setNodesMarker(this.range, i, !1) : i = e; var s = [], r = 0, o = this; this.$editor.find("*").each(function () { if (this == e) { var a = t(this).parent(); 0 !== a.length && "BODY" != a[0].tagName && o.utils.isRedactorParent(a[0]) && s.push(a[0]), s.push(this), r = 1 } else r > 0 && (s.push(this), r += 1); if (this == i) return !1 }); for (var a = [], n = s.length, l = 0; l < n; l++)"nodes-marker-1" != s[l].id && "nodes-marker-2" != s[l].id && a.push(s[l]); return this.selection.removeNodesMarkers(), a }, getNodesMarker: function (e) { return t('<span id="nodes-marker-' + e + '" class="redactor-nodes-marker" data-verified="redactor">' + this.opts.invisibleSpace + "</span>")[0] }, setNodesMarker: function (t, e, i) { t = t.cloneRange(); try { t.collapse(i), t.insertNode(e) } catch (t) { } }, removeNodesMarkers: function () { t(document).find("span.redactor-nodes-marker").remove(), this.$editor.find("span.redactor-nodes-marker").remove() }, fromPoint: function (t, e) { this.caret.setOffset(t, e) }, wrap: function (t) { if (this.selection.get(), this.range.collapsed) return !1; var e = document.createElement(t); return e.appendChild(this.range.extractContents()), this.range.insertNode(e), e }, selectElement: function (t) { this.caret.set(t, 0, t, 1) }, selectAll: function () { this.selection.get(), this.range.selectNodeContents(this.$editor[0]), this.selection.addRange() }, remove: function () { this.selection.get(), this.sel.removeAllRanges() }, save: function () { this.selection.createMarkers() }, createMarkers: function () { this.selection.get(); var t = this.selection.getMarker(1); if (this.selection.setMarker(this.range, t, !0), !1 === this.range.collapsed) { var e = this.selection.getMarker(2); this.selection.setMarker(this.range, e, !1), this.utils.browser("chrome") && this.caret.set(t, 0, e, 0) } this.savedSel = this.$editor.html() }, getMarker: function (e) { return void 0 === e && (e = 1), t('<span id="selection-marker-' + e + '" class="redactor-selection-marker"  data-verified="redactor">' + this.opts.invisibleSpace + "</span>")[0] }, getMarkerAsHtml: function (t) { return this.utils.getOuterHtml(this.selection.getMarker(t)) }, setMarker: function (t, e, i) { t = t.cloneRange(); try { t.collapse(i), t.insertNode(e) } catch (t) { this.focus.setStart() } }, restore: function () { var t = this.$editor.find("span#selection-marker-1"), e = this.$editor.find("span#selection-marker-2"); 0 !== t.length && 0 !== e.length ? this.caret.set(t, 0, e, 0) : 0 !== t.length ? this.caret.set(t, 0, t, 0) : this.$editor.focus(), this.selection.removeMarkers(), this.savedSel = !1 }, removeMarkers: function () { this.$editor.find("span.redactor-selection-marker").remove() }, getText: function () { return this.selection.get(), this.sel.toString() }, getHtml: function () { var t = ""; if (this.selection.get(), this.sel.rangeCount) { for (var e = document.createElement("div"), i = this.sel.rangeCount, s = 0; s < i; ++s)e.appendChild(this.sel.getRangeAt(s).cloneContents()); t = e.innerHTML } return this.clean.onSync(t) } } }, shortcuts: function () { return { init: function (e, i) { if (!this.opts.shortcuts) return !e.ctrlKey && !e.metaKey || 66 !== i && 73 !== i || e.preventDefault(), !1; t.each(this.opts.shortcuts, t.proxy(function (i, s) { for (var r = i.split(","), o = r.length, a = 0; a < o; a++)"string" == typeof r[a] && this.shortcuts.handler(e, t.trim(r[a]), t.proxy(function () { var t; "-1" != s.func.search(/\./) ? void 0 !== this[(t = s.func.split("."))[0]] && this[t[0]][t[1]].apply(this, s.params) : this[s.func].apply(this, s.params) }, this)) }, this)) }, handler: function (e, i, s) { var r = { "`": "~", 1: "!", 2: "@", 3: "#", 4: "$", 5: "%", 6: "^", 7: "&", 8: "*", 9: "(", 0: ")", "-": "_", "=": "+", ";": ": ", "'": '"', ",": "<", ".": ">", "/": "?", "\\": "|" }; i = i.toLowerCase().split(" "); var o = { 8: "backspace", 9: "tab", 10: "return", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause", 20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home", 37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del", 59: ";", 61: "=", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111: "/", 112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8", 120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 173: "-", 186: ";", 187: "=", 188: ",", 189: "-", 190: ".", 191: "/", 192: "`", 219: "[", 220: "\\", 221: "]", 222: "'" }[e.keyCode], a = String.fromCharCode(e.which).toLowerCase(), n = "", l = {}; t.each(["alt", "ctrl", "meta", "shift"], function (t, i) { e[i + "Key"] && o !== i && (n += i + "+") }), o && (l[n + o] = !0), a && (l[n + a] = !0, l[n + r[a]] = !0, "shift+" === n && (l[r[a]] = !0)); for (var c = 0, h = i.length; c < h; c++)if (l[i[c]]) return e.preventDefault(), s.apply(this, arguments) } } }, tabifier: function () { return { get: function (t) { if (!this.opts.tabifier) return t; var e = ["area", "body", "head", "hr", "i?frame", "link", "meta", "noscript", "style", "script", "table", "tbody", "thead", "tfoot"], i = ["li", "dt", "dt", "h[1-6]", "option", "script"]; this.tabifier.lineBefore = new RegExp("^<(/?" + e.join("|/?") + "|" + i.join("|") + ")[ >]"), this.tabifier.lineAfter = new RegExp("^<(br|/?" + e.join("|/?") + "|/" + i.join("|/") + ")[ >]"), this.tabifier.newLevel = new RegExp("^</?(" + ["blockquote", "div", "dl", "fieldset", "form", "frameset", "map", "ol", "p", "pre", "select", "td", "th", "tr", "ul"].join("|") + ")[ >]"); var s = 0, r = t.length, o = 0, a = null, n = null, l = "", c = "", h = ""; for (this.tabifier.cleanlevel = 0; s < r; s++) { if (o = s, -1 == t.substr(s).indexOf("<")) return c += t.substr(s), this.tabifier.finish(c); for (; o < r && "<" != t.charAt(o);)o++; for (s != o && ((h = t.substr(s, o - s)).match(/^\s{2,}$/g) || ("\n" == c.charAt(c.length - 1) ? c += this.tabifier.getTabs() : "\n" == h.charAt(0) && (c += "\n" + this.tabifier.getTabs(), h = h.replace(/^\s+/, "")), c += h), h.match(/\n/) && (c += "\n" + this.tabifier.getTabs())), a = o; o < r && ">" != t.charAt(o);)o++; var d; if (s = o, "!--" == (l = t.substr(a, o - a)).substr(1, 3)) { if (!l.match(/--$/)) { for (; "--\x3e" != t.substr(o, 3);)o++; o += 2, l = t.substr(a, o - a), s = o } "\n" != c.charAt(c.length - 1) && (c += "\n"), c += this.tabifier.getTabs(), c += l + ">\n" } else "!" == l[1] ? c = this.tabifier.placeTag(l + ">", c) : "?" == l[1] ? c += l + ">\n" : (d = l.match(/^<(script|style|pre)/i)) ? (d[1] = d[1].toLowerCase(), l = this.tabifier.cleanTag(l), c = this.tabifier.placeTag(l, c), (n = String(t.substr(s + 1)).toLowerCase().indexOf("</" + d[1])) && (h = t.substr(s + 1, n), s += n, c += h)) : (l = this.tabifier.cleanTag(l), c = this.tabifier.placeTag(l, c)) } return this.tabifier.finish(c) }, getTabs: function () { for (var t = "", e = 0; e < this.tabifier.cleanlevel; e++)t += "\t"; return t }, finish: function (t) { return t = (t = (t = (t = t.replace(/\n\s*\n/g, "\n")).replace(/^[\s\n]*/, "")).replace(/[\s\n]*$/, "")).replace(/<script(.*?)>\n<\/script>/gi, "<script$1><\/script>"), this.tabifier.cleanlevel = 0, t }, cleanTag: function (t) { var e, i = "", s = ""; for ((t = (t = (t = t.replace(/\n/g, " ")).replace(/\s{2,}/g, " ")).replace(/^\s+|\s+$/g, " ")).match(/\/$/) && (s = "/", t = t.replace(/\/+$/, "")); e = /\s*([^= ]+)(?:=((['"']).*?\3|[^ ]+))?/.exec(t);)e[2] ? i += e[1].toLowerCase() + "=" + e[2] : e[1] && (i += e[1].toLowerCase()), i += " ", t = t.substr(e[0].length); return i.replace(/\s*$/, "") + s + ">" }, placeTag: function (t, e) { var i = t.match(this.tabifier.newLevel); return (t.match(this.tabifier.lineBefore) || i) && (e = e.replace(/\s*$/, ""), e += "\n"), i && "/" == t.charAt(1) && this.tabifier.cleanlevel-- , "\n" == e.charAt(e.length - 1) && (e += this.tabifier.getTabs()), i && "/" != t.charAt(1) && this.tabifier.cleanlevel++ , e += t, (t.match(this.tabifier.lineAfter) || t.match(this.tabifier.newLevel)) && (e = e.replace(/ *$/, ""), e += "\n"), e } } }, tidy: function () { return { setupAllowed: function () { if (this.opts.allowedTags && (this.opts.deniedTags = !1), this.opts.allowedAttr && (this.opts.removeAttr = !1), !this.opts.linebreaks) { var t = ["p", "section"]; this.opts.allowedTags && this.tidy.addToAllowed(t), this.opts.deniedTags && this.tidy.removeFromDenied(t) } }, addToAllowed: function (e) { for (var i = e.length, s = 0; s < i; s++)-1 == t.inArray(e[s], this.opts.allowedTags) && this.opts.allowedTags.push(e[s]) }, removeFromDenied: function (e) { for (var i = e.length, s = 0; s < i; s++) { var r = t.inArray(e[s], this.opts.deniedTags); -1 != r && this.opts.deniedTags.splice(r, 1) } }, load: function (e, i) { return this.tidy.settings = { deniedTags: this.opts.deniedTags, allowedTags: this.opts.allowedTags, removeComments: this.opts.removeComments, replaceTags: this.opts.replaceTags, replaceStyles: this.opts.replaceStyles, removeDataAttr: this.opts.removeDataAttr, removeAttr: this.opts.removeAttr, allowedAttr: this.opts.allowedAttr, removeWithoutAttr: this.opts.removeWithoutAttr, removeEmpty: this.opts.removeEmpty }, t.extend(this.tidy.settings, i), e = this.tidy.removeComments(e), this.tidy.$div = t("<div />").append(e), this.tidy.replaceTags(), this.tidy.replaceStyles(), this.tidy.removeTags(), this.tidy.removeAttr(), this.tidy.removeEmpty(), this.tidy.removeParagraphsInLists(), this.tidy.removeDataAttr(), this.tidy.removeWithoutAttr(), e = this.tidy.$div.html(), this.tidy.$div.remove(), e }, removeComments: function (t) { return this.tidy.settings.removeComments ? t.replace(/<!--[\s\S]*?-->/gi, "") : t }, replaceTags: function (e) { if (!this.tidy.settings.replaceTags) return e; for (var i = this.tidy.settings.replaceTags.length, s = [], r = [], o = 0; o < i; o++)r.push(this.tidy.settings.replaceTags[o][1]), s.push(this.tidy.settings.replaceTags[o][0]); return this.tidy.$div.find(s.join(",")).each(t.proxy(function (e, i) { var s = r[e]; t(i).replaceWith(function () { for (var e = t("<" + s + " />").append(t(this).contents()), i = 0; i < this.attributes.length; i++)e.attr(this.attributes[i].name, this.attributes[i].value); return e }) }, this)), e }, replaceStyles: function () { if (this.tidy.settings.replaceStyles) { var e = this.tidy.settings.replaceStyles.length; this.tidy.$div.find("span").each(t.proxy(function (i, s) { for (var r = t(s), o = r.attr("style"), a = 0; a < e; a++)if (o && o.match(new RegExp("^" + this.tidy.settings.replaceStyles[a][0], "i"))) { var n = this.tidy.settings.replaceStyles[a][1]; r.replaceWith(function () { var e = document.createElement(n); return t(e).append(t(this).contents()) }) } }, this)) } }, removeTags: function () { !this.tidy.settings.deniedTags && this.tidy.settings.allowedTags && this.tidy.$div.find("*").not(this.tidy.settings.allowedTags.join(",")).each(function (e, i) { "" === i.innerHTML ? t(i).remove() : t(i).contents().unwrap() }), this.tidy.settings.deniedTags && this.tidy.$div.find(this.tidy.settings.deniedTags.join(",")).each(function (e, i) { "" === i.innerHTML ? t(i).remove() : t(i).contents().unwrap() }) }, removeAttr: function () { var e; if (!this.tidy.settings.removeAttr && this.tidy.settings.allowedAttr) { var i = [], s = []; e = this.tidy.settings.allowedAttr.length; for (var r = 0; r < e; r++)i.push(this.tidy.settings.allowedAttr[r][0]), s.push(this.tidy.settings.allowedAttr[r][1]); this.tidy.$div.find("*").each(t.proxy(function (e, r) { var o = t(r), a = t.inArray(o[0].tagName.toLowerCase(), i), n = this.tidy.removeAttrGetRemoves(a, s, o); n && t.each(n, function (t, e) { o.removeAttr(e) }) }, this)) } if (this.tidy.settings.removeAttr) { e = this.tidy.settings.removeAttr.length; for (r = 0; r < e; r++) { var o = this.tidy.settings.removeAttr[r][1]; t.isArray(o) && (o = o.join(" ")), this.tidy.$div.find(this.tidy.settings.removeAttr[r][0]).removeAttr(o) } } }, removeAttrGetRemoves: function (e, i, s) { var r = []; return -1 == e ? t.each(s[0].attributes, function (t, e) { r.push(e.name) }) : "*" == i[e] ? r = [] : t.each(s[0].attributes, function (s, o) { t.isArray(i[e]) ? -1 == t.inArray(o.name, i[e]) && r.push(o.name) : i[e] != o.name && r.push(o.name) }), r }, removeAttrs: function (e, i) { return i = new RegExp(i, "g"), e.each(function () { for (var e = t(this), s = this.attributes.length - 1; s >= 0; s--) { var r = this.attributes[s]; r && r.specified && r.name.search(i) >= 0 && e.removeAttr(r.name) } }) }, removeEmpty: function () { this.tidy.settings.removeEmpty && this.tidy.$div.find(this.tidy.settings.removeEmpty.join(",")).each(function () { var e = t(this), i = e.text(); "" === (i = (i = (i = i.replace(/[\u200B-\u200D\uFEFF]/g, "")).replace(/&nbsp;/gi, "")).replace(/\s/g, "")) && 0 === e.children().length && e.remove() }) }, removeParagraphsInLists: function () { this.tidy.$div.find("li p").contents().unwrap() }, removeDataAttr: function () { if (this.tidy.settings.removeDataAttr) { var e = this.tidy.settings.removeDataAttr; t.isArray(this.tidy.settings.removeDataAttr) && (e = this.tidy.settings.removeDataAttr.join(",")), this.tidy.removeAttrs(this.tidy.$div.find(e), "^(data-)") } }, removeWithoutAttr: function () { this.tidy.settings.removeWithoutAttr && this.tidy.$div.find(this.tidy.settings.removeWithoutAttr.join(",")).each(function () { 0 === this.attributes.length && t(this).contents().unwrap() }) } } }, toolbar: function () { return { init: function () { return { html: { title: this.lang.get("html"), func: "code.toggle" }, formatting: { title: this.lang.get("formatting"), dropdown: { p: { title: this.lang.get("paragraph"), func: "block.format" }, blockquote: { title: this.lang.get("quote"), func: "block.format" }, pre: { title: this.lang.get("code"), func: "block.format" }, h1: { title: this.lang.get("header1"), func: "block.format" }, h2: { title: this.lang.get("header2"), func: "block.format" }, h3: { title: this.lang.get("header3"), func: "block.format" }, h4: { title: this.lang.get("header4"), func: "block.format" }, h5: { title: this.lang.get("header5"), func: "block.format" } } }, bold: { title: this.lang.get("bold"), func: "inline.format" }, italic: { title: this.lang.get("italic"), func: "inline.format" }, deleted: { title: this.lang.get("deleted"), func: "inline.format" }, underline: { title: this.lang.get("underline"), func: "inline.format" }, unorderedlist: { title: "&bull; " + this.lang.get("unorderedlist"), func: "list.toggle" }, orderedlist: { title: "1. " + this.lang.get("orderedlist"), func: "list.toggle" }, outdent: { title: "< " + this.lang.get("outdent"), func: "indent.decrease" }, indent: { title: "> " + this.lang.get("indent"), func: "indent.increase" }, image: { title: this.lang.get("image"), func: "image.show" }, file: { title: this.lang.get("file"), func: "file.show" }, link: { title: this.lang.get("link"), dropdown: { link: { title: this.lang.get("link_insert"), func: "link.show" }, unlink: { title: this.lang.get("unlink"), func: "link.unlink" } } }, alignment: { title: this.lang.get("alignment"), dropdown: { left: { title: this.lang.get("align_left"), func: "alignment.left" }, center: { title: this.lang.get("align_center"), func: "alignment.center" }, right: { title: this.lang.get("align_right"), func: "alignment.right" }, justify: { title: this.lang.get("align_justify"), func: "alignment.justify" } } }, horizontalrule: { title: this.lang.get("horizontalrule"), func: "line.insert" } } }, build: function () { this.toolbar.hideButtons(), this.toolbar.hideButtonsOnMobile(), this.toolbar.isButtonSourceNeeded(), 0 !== this.opts.buttons.length && (this.$toolbar = this.toolbar.createContainer(), this.toolbar.setOverflow(), this.toolbar.append(), this.toolbar.setFormattingTags(), this.toolbar.loadButtons(), this.toolbar.setFixed(), this.opts.activeButtons && this.$editor.on("mouseup.redactor keyup.redactor focus.redactor", t.proxy(this.observe.buttons, this))) }, createContainer: function () { return t("<ul>").addClass("redactor-toolbar").attr("id", "redactor-toolbar-" + this.uuid) }, setFormattingTags: function () { t.each(this.opts.toolbar.formatting.dropdown, t.proxy(function (e, i) { -1 == t.inArray(e, this.opts.formatting) && delete this.opts.toolbar.formatting.dropdown[e] }, this)) }, loadButtons: function () { t.each(this.opts.buttons, t.proxy(function (e, i) { if (this.opts.toolbar[i]) { if (!1 === this.opts.fileUpload && "file" === i) return !0; if (!1 === this.opts.imageUpload && !1 === this.opts.s3 && "image" === i) return !0; var s = this.opts.toolbar[i]; this.$toolbar.append(t("<li>").append(this.button.build(i, s))) } }, this)) }, append: function () { this.opts.toolbarExternal ? (this.$toolbar.addClass("redactor-toolbar-external"), t(this.opts.toolbarExternal).html(this.$toolbar)) : this.$box.prepend(this.$toolbar) }, setFixed: function () { this.utils.isMobile() || this.opts.toolbarExternal || this.opts.toolbarFixed && (this.toolbar.observeScroll(), t(this.opts.toolbarFixedTarget).on("scroll.redactor", t.proxy(this.toolbar.observeScroll, this))) }, setOverflow: function () { this.utils.isMobile() && this.opts.toolbarOverflow && this.$toolbar.addClass("redactor-toolbar-overflow") }, isButtonSourceNeeded: function () { if (!this.opts.buttonSource) { var t = this.opts.buttons.indexOf("html"); -1 !== t && this.opts.buttons.splice(t, 1) } }, hideButtons: function () { 0 !== this.opts.buttonsHide.length && t.each(this.opts.buttonsHide, t.proxy(function (t, e) { var i = this.opts.buttons.indexOf(e); this.opts.buttons.splice(i, 1) }, this)) }, hideButtonsOnMobile: function () { this.utils.isMobile() && 0 !== this.opts.buttonsHideOnMobile.length && t.each(this.opts.buttonsHideOnMobile, t.proxy(function (t, e) { var i = this.opts.buttons.indexOf(e); this.opts.buttons.splice(i, 1) }, this)) }, observeScroll: function () { var e = t(this.opts.toolbarFixedTarget).scrollTop(), i = 1; this.opts.toolbarFixedTarget === document && (i = this.$box.offset().top), e > i ? this.toolbar.observeScrollEnable(e, i) : this.toolbar.observeScrollDisable() }, observeScrollEnable: function (t, e) { var i = this.opts.toolbarFixedTopOffset + t - e, s = e + this.$box.height() + 30, r = this.$box.innerWidth(); this.$toolbar.addClass("toolbar-fixed-box"), this.$toolbar.css({ position: "absolute", width: r, top: i + "px", left: 0 }), this.toolbar.setDropdownsFixed(), this.$toolbar.css("visibility", t < s ? "visible" : "hidden") }, observeScrollDisable: function () { this.$toolbar.css({ position: "relative", width: "auto", top: 0, left: 0, visibility: "visible" }), this.toolbar.unsetDropdownsFixed(), this.$toolbar.removeClass("toolbar-fixed-box") }, setDropdownsFixed: function () { var e = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset, i = "fixed"; this.opts.toolbarFixedTarget !== document && (e = this.$toolbar.innerHeight() + this.$toolbar.offset().top + this.opts.toolbarFixedTopOffset, i = "absolute"), t(".redactor-dropdown").each(function () { t(this).css({ position: i, top: e + "px" }) }) }, unsetDropdownsFixed: function () { var e = this.$toolbar.innerHeight() + this.$toolbar.offset().top; t(".redactor-dropdown").each(function () { t(this).css({ position: "absolute", top: e + "px" }) }) } } }, upload: function () { return { init: function (e, i, s) { this.upload.direct = !1, this.upload.callback = s, this.upload.url = i, this.upload.$el = t(e), this.upload.$droparea = t('<div id="redactor-droparea" />'), this.upload.$placeholdler = t('<div id="redactor-droparea-placeholder" />').text("Drop file here or "), this.upload.$input = t('<input type="file" name="file" />'), this.upload.$placeholdler.append(this.upload.$input), this.upload.$droparea.append(this.upload.$placeholdler), this.upload.$el.append(this.upload.$droparea), this.upload.$droparea.off("redactor.upload"), this.upload.$input.off("redactor.upload"), this.upload.$droparea.on("dragover.redactor.upload", t.proxy(this.upload.onDrag, this)), this.upload.$droparea.on("dragleave.redactor.upload", t.proxy(this.upload.onDragLeave, this)), this.upload.$input.on("change.redactor.upload", t.proxy(function (t) { t = t.originalEvent || t, this.upload.traverseFile(this.upload.$input[0].files[0], t) }, this)), this.upload.$droparea.on("drop.redactor.upload", t.proxy(function (t) { t.preventDefault(), this.upload.$droparea.removeClass("drag-hover").addClass("drag-drop"), this.upload.onDrop(t) }, this)) }, directUpload: function (t, e) { this.upload.direct = !0, this.upload.traverseFile(t, e) }, onDrop: function (t) { var e = (t = t.originalEvent || t).dataTransfer.files; this.upload.traverseFile(e[0], t) }, traverseFile: function (t, e) { if (this.opts.s3) return this.upload.setConfig(t), void this.upload.s3uploadFile(t); var i = window.FormData ? new FormData : null; if (window.FormData) { this.upload.setConfig(t); var s = "image" == this.upload.type ? this.opts.imageUploadParam : this.opts.fileUploadParam; i.append(s, t) } this.progress.show(), this.upload.sendData(i, e) }, setConfig: function (t) { this.upload.getType(t), this.upload.direct && (this.upload.url = "image" == this.upload.type ? this.opts.imageUpload : this.opts.fileUpload, this.upload.callback = "image" == this.upload.type ? this.image.insert : this.file.insert) }, getType: function (t) { this.upload.type = "image", -1 == this.opts.imageTypes.indexOf(t.type) && (this.upload.type = "file") }, getHiddenFields: function (e, i) { return !1 === e || "object" != typeof e ? i : (t.each(e, t.proxy(function (e, s) { null !== s && 0 === s.toString().indexOf("#") && (s = t(s).val()), i.append(e, s) }, this)), i) }, sendData: function (e, i) { "image" == this.upload.type ? (e = this.upload.getHiddenFields(this.opts.uploadImageFields, e), e = this.upload.getHiddenFields(this.upload.imageFields, e)) : (e = this.upload.getHiddenFields(this.opts.uploadFileFields, e), e = this.upload.getHiddenFields(this.upload.fileFields, e)); var s = new XMLHttpRequest; s.open("POST", this.upload.url), s.onreadystatechange = t.proxy(function () { if (4 == s.readyState) { var e, r = s.responseText; r = (r = r.replace(/^\[/, "")).replace(/\]$/, ""); try { e = "string" == typeof r ? t.parseJSON(r) : r } catch (t) { e = { error: !0 } } this.progress.hide(), this.upload.direct || this.upload.$droparea.removeClass("drag-drop"), this.upload.callback(e, this.upload.direct, i) } }, this), s.send(e) }, onDrag: function (t) { t.preventDefault(), this.upload.$droparea.addClass("drag-hover") }, onDragLeave: function (t) { t.preventDefault(), this.upload.$droparea.removeClass("drag-hover") }, clearImageFields: function () { this.upload.imageFields = {} }, addImageFields: function (t, e) { this.upload.imageFields[t] = e }, removeImageFields: function (t) { delete this.upload.imageFields[t] }, clearFileFields: function () { this.upload.fileFields = {} }, addFileFields: function (t, e) { this.upload.fileFields[t] = e }, removeFileFields: function (t) { delete this.upload.fileFields[t] }, s3uploadFile: function (e) { this.upload.s3executeOnSignedUrl(e, t.proxy(function (t) { this.upload.s3uploadToS3(e, t) }, this)) }, s3executeOnSignedUrl: function (t, e) { var i = new XMLHttpRequest, s = "?"; "-1" != this.opts.s3.search(/\?/) && (s = "&"), i.open("GET", this.opts.s3 + s + "name=" + t.name + "&type=" + t.type, !0), i.overrideMimeType && i.overrideMimeType("text/plain; charset=x-user-defined"); var r = this; i.onreadystatechange = function (t) { 4 == this.readyState && 200 == this.status ? (r.progress.show(), e(decodeURIComponent(this.responseText))) : 4 == this.readyState && this.status }, i.send() }, s3createCORSRequest: function (t, e) { var i = new XMLHttpRequest; return "withCredentials" in i ? i.open(t, e, !0) : "undefined" != typeof XDomainRequest ? (i = new XDomainRequest).open(t, e) : i = null, i }, s3uploadToS3: function (e, i) { var s = this.upload.s3createCORSRequest("PUT", i); s && (s.onload = t.proxy(function () { if (200 == s.status) { this.progress.hide(); var t = i.split("?"); if (!t[0]) return !1; this.upload.direct || this.upload.$droparea.removeClass("drag-drop"); var e = { filelink: t[0] }; if ("file" == this.upload.type) { var r = t[0].split("/"); e.filename = r[r.length - 1] } this.upload.callback(e, this.upload.direct, !1) } }, this), s.onerror = function () { }, s.upload.onprogress = function (t) { }, s.setRequestHeader("Content-Type", e.type), s.setRequestHeader("x-amz-acl", "public-read"), s.send(e)) } } }, utils: function () { return { isMobile: function () { return /(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent) }, isDesktop: function () { return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(navigator.userAgent) }, isString: function (t) { return "[object String]" == Object.prototype.toString.call(t) }, isEmpty: function (e, i) { return e = (e = (e = (e = (e = e.replace(/[\u200B-\u200D\uFEFF]/g, "")).replace(/&nbsp;/gi, "")).replace(/<\/?br\s?\/?>/g, "")).replace(/\s/g, "")).replace(/^<p>[^\W\w\D\d]*?<\/p>$/i, ""), !1 !== i && (e = (e = e.replace(/<[^\/>][^>]*><\/[^>]+>/gi, "")).replace(/<[^\/>][^>]*><\/[^>]+>/gi, "")), "" === (e = t.trim(e)) }, normalize: function (t) { return void 0 === t ? 0 : parseInt(t.replace("px", ""), 10) }, hexToRgb: function (t) { if (void 0 !== t) { if (-1 == t.search(/^#/)) return t; t = t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (t, e, i, s) { return e + e + i + i + s + s }); var e = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t); return "rgb(" + parseInt(e[1], 16) + ", " + parseInt(e[2], 16) + ", " + parseInt(e[3], 16) + ")" } }, getOuterHtml: function (e) { return t("<div>").append(t(e).eq(0).clone()).html() }, getAlignmentElement: function (e) { return -1 !== t.inArray(e.tagName, this.opts.alignmentTags) ? t(e) : t(e).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]) }, removeEmptyAttr: function (e, i) { var s = t(e); return void 0 === s.attr(i) || "" === s.attr(i) && (s.removeAttr(i), !0) }, removeEmpty: function (e, i) { var s = t(i); if (s.find(".redactor-invisible-space").replaceWith(function () { return t(this).contents() }), 0 === s.find("hr, br, img, iframe").length) { var r = t.trim(s.text()); this.utils.isEmpty(r, !1) && s.remove() } }, saveScroll: function () { this.utils.isSelectAll() || (this.saveEditorScroll = this.$editor.scrollTop(), this.saveBodyScroll = t(window).scrollTop(), this.opts.scrollTarget && (this.saveTargetScroll = t(this.opts.scrollTarget).scrollTop())) }, restoreScroll: function () { void 0 === this.saveScroll && void 0 === this.saveBodyScroll || (t(window).scrollTop(this.saveBodyScroll), this.$editor.scrollTop(this.saveEditorScroll), this.opts.scrollTarget && t(this.opts.scrollTarget).scrollTop(this.saveTargetScroll)) }, createSpaceElement: function () { var t = document.createElement("span"); return t.className = "redactor-invisible-space", t.innerHTML = this.opts.invisibleSpace, t }, removeInlineTags: function (e) { var i = this.opts.inlineTags; i.push("span"), "PRE" == e.tagName && i.push("a"), t(e).find(i.join(",")).not("span.redactor-selection-marker").contents().unwrap() }, replaceWithContents: function (e, i) { var s = this; t(e).replaceWith(function () { return !0 === i && s.utils.removeInlineTags(this), t(this).contents() }) }, replaceToTag: function (e, i, s) { var r, o = this; return t(e).replaceWith(function () { r = t("<" + i + " />").append(t(this).contents()); for (var e = 0; e < this.attributes.length; e++)r.attr(this.attributes[e].name, this.attributes[e].value); return !0 === s && o.utils.removeInlineTags(r), r }), r }, isStartOfElement: function () { var t = this.selection.getBlock(); return !!t && 0 === this.caret.getOffsetOfElement(t) }, isEndOfElement: function () { var e = this.selection.getBlock(); return !!e && this.caret.getOffsetOfElement(e) == t.trim(t(e).text()).replace(/\n\r\n/g, "").length }, isBlock: function (t) { return (t = t[0] || t) && this.utils.isBlockTag(t.tagName) }, isBlockTag: function (t) { return void 0 !== t && this.reIsBlock.test(t) }, isTag: function (e, i) { var s = t(e).closest(i); return 1 == s.size() && s[0] }, isSelectAll: function () { return this.selectAll }, enableSelectAll: function () { this.selectAll = !0 }, disableSelectAll: function () { this.selectAll = !1 }, isRedactorParent: function (e) { return !!e && (0 !== t(e).parents(".redactor-editor").length && !t(e).hasClass("redactor-editor") && e) }, isCurrentOrParent: function (e) { var i = this.selection.getParent(), s = this.selection.getCurrent(); if (t.isArray(e)) { var r = 0; return t.each(e, t.proxy(function (t, e) { this.utils.isCurrentOrParentOne(s, i, e) && r++ }, this)), 0 !== r } return this.utils.isCurrentOrParentOne(s, i, e) }, isCurrentOrParentOne: function (t, e, i) { return e && e.tagName === i ? e : !(!t || t.tagName !== i) && t }, isOldIe: function () { return !!(this.utils.browser("msie") && parseInt(this.utils.browser("version"), 10) < 9) }, isLessIe10: function () { return !!(this.utils.browser("msie") && parseInt(this.utils.browser("version"), 10) < 10) }, isIe11: function () { return !!navigator.userAgent.match(/Trident\/7\./) }, browser: function (t) { var e = navigator.userAgent.toLowerCase(), i = /(opr)[\/]([\w.]+)/.exec(e) || /(chrome)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e) || []; return "version" == t ? i[2] : "webkit" == t ? "chrome" == i[1] || "webkit" == i[1] : "rv" == i[1] ? "msie" == t : "opr" == i[1] ? "webkit" == t : t == i[1] } } } }, r.prototype.init.prototype = r.prototype, t.Redactor.fn.formatLinkify = function (e, r, o, a, n, l) { for (var c = new RegExp("((?:http[s]?:\\/\\/(?:www\\.)?|www\\.){1}(?:[0-9A-Za-z\\-%_]+\\.)+[a-zA-Z]{2,}(?::[0-9]+)?(?:(?:/[0-9A-Za-z\\-\\.%+_]*)+)?(?:\\?(?:[0-9A-Za-z\\-\\.%_]+(?:=[0-9A-Za-z\\-\\.%_\\+]*)?)?(?:&(?:[0-9A-Za-z\\-\\.%_]+(?:=[0-9A-Za-z\\-\\.%_\\+]*)?)?)*)?(?:#[0-9A-Za-z\\-\\.%_\\+=\\?&;]*)?)", "gi"), h = /(https?|ftp):\/\//i, d = /(https?:\/\/.*\.(?:png|jpg|jpeg|gif))/gi, p = (this.$editor ? this.$editor[0] : this).childNodes, u = p.length; u--;) { var f = p[u]; if (3 === f.nodeType) { var g = f.nodeValue; if (n && g) { var m = '<iframe width="500" height="281" src="', v = '" frameborder="0" allowfullscreen></iframe>'; g.match(i) ? (g = g.replace(i, m + "//www.youtube.com/embed/$1" + v), t(f).after(g).remove()) : g.match(s) && (g = g.replace(s, m + "//player.vimeo.com/video/$2" + v), t(f).after(g).remove()) } if (a && g && g.match(d)) return g = g.replace(d, '<img src="$1" />'), void t(f).after(g).remove(); -1 != g.search(/\$/g) && (g = g.replace(/\$/g, "&#36;")); var b = g.match(c); if (o && g && b) { for (var k = b.length, y = 0; y < k; y++) { null !== b[y].match(/\.$/) && (b[y] = b[y].replace(/\.$/, "")); var w = b[y], x = w, $ = ""; null !== w.match(/\s$/) && ($ = " "); var T = e + "://"; null !== w.match(h) && (T = ""), x.length > l && (x = x.substring(0, l) + "..."), x = x.replace(/&#36;/g, "$").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), g = g.replace(w, '<a href="' + T + t.trim(w) + '">' + t.trim(x) + "</a>" + $) } t(f).after(g).remove() } } else 1 !== f.nodeType || /^(a|button|textarea)$/i.test(f.tagName) || t.Redactor.fn.formatLinkify.call(f, e, r, o, a, n, l) } } }(jQuery);